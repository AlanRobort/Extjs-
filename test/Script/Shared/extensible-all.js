/*!
 * Extensible 1.5.1
 * Copyright(c) 2010-2011 Extensible, LLC
 * licensing@ext.ensible.com
 * http://ext.ensible.com
 *//**
 * @class Extensible
 * Extensible core utilities and functions.
 * @singleton
 */Ext.define("Extensible", { singleton: !0, version: "1.5.1", versionDetails: { major: 1, minor: 5, patch: 1 }, extVersion: "4.0.1", hasBorderRadius: Ext.supports.CSS3BorderRadius, log: function (e) { }, getScrollWidth: function () { return Ext.getScrollbarSize ? Ext.getScrollbarSize().width : Ext.getScrollBarWidth() }, constructor: function () { Ext.onReady(function () { Extensible.getScrollWidth() < 3 && Ext.getBody().addCls("x-no-scrollbar"), Ext.isWindows && Ext.getBody().addCls("x-win") }) }, Date: { use24HourTime: !1, diff: function (e, t, n) { var r = 1, i = t.getTime() - e.getTime(); return n == "s" ? r = 1e3 : n == "m" ? r = 6e4 : n == "h" && (r = 36e5), Math.round(i / r) }, diffDays: function (e, t) { var n = 864e5, r = Ext.Date.clearTime, i = r(t, !0).getTime() - r(e, !0).getTime(); return Math.ceil(i / n) }, copyTime: function (e, t) { var n = Ext.Date.clone(t); return n.setHours(e.getHours(), e.getMinutes(), e.getSeconds(), e.getMilliseconds()), n }, compare: function (e, t, n) { var r = e, i = t; return n !== !0 && (r = Ext.Date.clone(e), r.setMilliseconds(0), i = Ext.Date.clone(t), i.setMilliseconds(0)), i.getTime() - r.getTime() }, maxOrMin: function (e) { var t = e ? 0 : Number.MAX_VALUE, n = 0, r = arguments[1], i = r.length; for (; n < i; n++) t = Math[e ? "max" : "min"](t, r[n].getTime()); return new Date(t) }, max: function () { return this.maxOrMin.apply(this, [!0, arguments]) }, min: function () { return this.maxOrMin.apply(this, [!1, arguments]) }, isInRange: function (e, t, n) { return e >= t && e <= n }, rangesOverlap: function (e, t, n, r) { var i = e >= n && e <= r, s = t >= n && t <= r, o = e <= n && t >= r; return i || s || o }, isWeekend: function (e) { return e.getDay() % 6 === 0 }, isWeekday: function (e) { return e.getDay() % 6 !== 0 }, isMidnight: function (e) { return e.getHours() === 0 && e.getMinutes() === 0 }, isToday: function (e) { return this.diffDays(e, this.today()) === 0 }, today: function () { return Ext.Date.clearTime(new Date) }, add: function (e, t) { if (!t) return e; var n = Ext.Date, r = n.add, i = n.clone(e); return t.years && (i = r(i, n.YEAR, t.years)), t.months && (i = r(i, n.MONTH, t.months)), t.weeks && (t.days = (t.days || 0) + t.weeks * 7), t.days && (i = r(i, n.DAY, t.days)), t.hours && (i = r(i, n.HOUR, t.hours)), t.minutes && (i = r(i, n.MINUTE, t.minutes)), t.seconds && (i = r(i, n.SECOND, t.seconds)), t.millis && (i = r(i, n.MILLI, t.millis)), t.clearTime ? n.clearTime(i) : i } } }), Ext.require(["Ext.picker.Color", "Ext.form.Basic", "Ext.data.MemoryProxy"]), Extensible.applyOverrides = function () { Ext.DomHelper = Ext.core.DomHelper; var e = Ext.getVersion(); Ext.layout.container.AbstractCard && Ext.layout.container.AbstractCard.override({ renderChildren: function () { this.deferredRender || (this.getActiveItem(), this.callParent()) } }), Ext.Component.override({ getId: function () { var e = this, t; return e.id || (t = e.getXType(), t = t ? t.replace(/[\.,\s]/g, "-") : "ext-comp", e.id = t + "-" + e.getAutoId()), e.id } }), Ext.picker && Ext.picker.Color && Ext.picker.Color.override({ constructor: function () { this.renderTpl = this.renderTpl || Ext.create("Ext.XTemplate", '<tpl for="colors"><a href="#" class="color-{.}" hidefocus="on"><em><span style="background:#{.}" unselectable="on">&#160;</span></em></a></tpl>'), this.callParent(arguments) } }), e.isLessThan("4.1") && Ext.data && Ext.data.reader && Ext.data.reader.Reader && Ext.data.reader.Reader.override({ extractData: function (e) { var t = this, n = [], r = [], i = t.model, s = 0, o = e.length, u = t.getIdProperty(), a, f, l; !e.length && Ext.isObject(e) && (e = [e], o = 1); for (; s < o; s++) a = e[s], n = t.extractValues(a), f = t.getId(n), l = new i(n, f, a), r.push(l), t.implicitIncludes && t.readAssociated(l, a); return r } }), Ext.form && Ext.form.Basic && Ext.form.Basic.override({ reset: function () { var e = this; return e.getFields().each(function (e) { e.reset() }), e } }), Ext.data && Ext.data.MemoryProxy && Ext.data.MemoryProxy.override({ updateOperation: function (e, t, n) { Ext.each(e.records, function (e) { e.commit() }), e.setCompleted(), e.setSuccessful(), Ext.callback(t, n || this, [e]) }, create: function () { this.updateOperation.apply(this, arguments) }, update: function () { this.updateOperation.apply(this, arguments) }, destroy: function () { this.updateOperation.apply(this, arguments) } }) }, Ext.onReady(Extensible.applyOverrides), Ext.ns("Extensible.calendar.data"), Extensible.calendar.data.EventMappings = { EventId: { name: "EventId", mapping: "id", type: "int" }, CalendarId: { name: "CalendarId", mapping: "cid", type: "int" }, Title: { name: "Title", mapping: "title", type: "string" }, StartDate: { name: "StartDate", mapping: "start", type: "date", dateFormat: "c" }, EndDate: { name: "EndDate", mapping: "end", type: "date", dateFormat: "c" }, RRule: { name: "RecurRule", mapping: "rrule", type: "string" }, Location: { name: "Location", mapping: "loc", type: "string" }, Notes: { name: "Notes", mapping: "notes", type: "string" }, Url: { name: "Url", mapping: "url", type: "string" }, IsAllDay: { name: "IsAllDay", mapping: "ad", type: "boolean" }, Reminder: { name: "Reminder", mapping: "rem", type: "string" } }, Ext.ns("Extensible.calendar.data"), Extensible.calendar.data.CalendarMappings = { CalendarId: { name: "CalendarId", mapping: "id", type: "int" }, Title: { name: "Title", mapping: "title", type: "string" }, Description: { name: "Description", mapping: "desc", type: "string" }, ColorId: { name: "ColorId", mapping: "color", type: "int" }, IsHidden: { name: "IsHidden", mapping: "hidden", type: "boolean" } }, Ext.define("Extensible.calendar.template.BoxLayout", { extend: "Ext.XTemplate", requires: ["Ext.Date"], firstWeekDateFormat: "D j", otherWeeksDateFormat: "j", singleDayDateFormat: "l, F j, Y", multiDayFirstDayFormat: "M j, Y", multiDayMonthStartFormat: "M j", constructor: function (e) { Ext.apply(this, e); var t = this.showWeekLinks ? '<div id="{weekLinkId}" class="ext-cal-week-link">{weekNum}</div>' : ""; Extensible.calendar.template.BoxLayout.superclass.constructor.call(this, '<tpl for="weeks">', '<div id="{[this.id]}-wk-{[xindex-1]}" class="ext-cal-wk-ct" style="top:{[this.getRowTop(xindex, xcount)]}%; height:{[this.getRowHeight(xcount)]}%;">', t, '<table class="ext-cal-bg-tbl" cellpadding="0" cellspacing="0">', "<tbody>", "<tr>", '<tpl for=".">', '<td id="{[this.id]}-day-{date:date("Ymd")}" class="{cellCls}">&#160;</td>', "</tpl>", "</tr>", "</tbody>", "</table>", '<table class="ext-cal-evt-tbl" cellpadding="0" cellspacing="0">', "<tbody>", "<tr>", '<tpl for=".">', '<td id="{[this.id]}-ev-day-{date:date("Ymd")}" class="{titleCls}"><div>{title}</div></td>', "</tpl>", "</tr>", "</tbody>", "</table>", "</div>", "</tpl>", { getRowTop: function (e, t) { return (e - 1) * (100 / t) }, getRowHeight: function (e) { return 100 / e } }) }, applyTemplate: function (e) { Ext.apply(this, e); var t = 0, n = "", r = !0, i = !1, s = !1, o = !1, u = !1, a = !1, f = e.weekendCls, l = e.prevMonthCls, c = e.nextMonthCls, h = e.todayCls, p = [[]], d = Extensible.Date.today(), v = Ext.Date.clone(this.viewStart), m = this.startDate.getMonth(); for (; t < this.weekCount || this.weekCount == -1; t++) { if (v > this.viewEnd) break; p[t] = []; for (var g = 0; g < this.dayCount; g++) { i = v.getTime() === d.getTime(), s = r || v.getDate() == 1, o = v.getMonth() < m && this.weekCount == -1, u = v.getMonth() > m && this.weekCount == -1, a = v.getDay() % 6 === 0, v.getDay() == 1 && (p[t].weekNum = this.showWeekNumbers ? Ext.Date.format(v, "W") : "&#160;", p[t].weekLinkId = "ext-cal-week-" + Ext.Date.format(v, "Ymd")); if (s) i ? n = this.getTodayText() : n = Ext.Date.format(v, this.dayCount == 1 ? this.singleDayDateFormat : r ? this.multiDayFirstDayFormat : this.multiDayMonthStartFormat); else { var y = t == 0 && this.showHeader !== !0 ? this.firstWeekDateFormat : this.otherWeeksDateFormat; n = i ? this.getTodayText() : Ext.Date.format(v, y) } p[t].push({ title: n, date: Ext.Date.clone(v), titleCls: "ext-cal-dtitle " + (i ? " ext-cal-dtitle-today" : "") + (t == 0 ? " ext-cal-dtitle-first" : "") + (o ? " ext-cal-dtitle-prev" : "") + (u ? " ext-cal-dtitle-next" : ""), cellCls: "ext-cal-day " + (i ? " " + h : "") + (g == 0 ? " ext-cal-day-first" : "") + (o ? " " + l : "") + (u ? " " + c : "") + (a && f ? " " + f : "") }), v = Extensible.Date.add(v, { days: 1 }), r = !1 } } return Ext.getVersion().isLessThan("4.1") ? Extensible.calendar.template.BoxLayout.superclass.applyTemplate.call(this, { weeks: p }) : this.applyOut({ weeks: p }, []).join("") }, getTodayText: function () { var e = Extensible.Date.use24HourTime ? "G:i " : "g:ia ", t = this.showTodayText !== !1 ? this.todayText : "", n = this.showTime !== !1 ? ' <span id="' + this.id + '-clock" class="ext-cal-dtitle-time" aria-live="off">' + Ext.Date.format(new Date, e) + "</span>" : "", r = t.length > 0 || n.length > 0 ? " &#8212; " : ""; return this.dayCount == 1 ? Ext.Date.format(new Date, this.singleDayDateFormat) + r + t + n : (fmt = this.weekCount == 1 ? this.firstWeekDateFormat : this.otherWeeksDateFormat, t.length > 0 ? t + n : Ext.Date.format(new Date, fmt) + n) } }, function () { this.createAlias("apply", "applyTemplate") }), Ext.define("Extensible.calendar.template.DayHeader", { extend: "Ext.XTemplate", requires: ["Extensible.calendar.template.BoxLayout"], constructor: function (e) { Ext.apply(this, e), this.allDayTpl = Ext.create("Extensible.calendar.template.BoxLayout", e), this.allDayTpl.compile(), Extensible.calendar.template.DayHeader.superclass.constructor.call(this, '<div class="ext-cal-hd-ct">', '<table class="ext-cal-hd-days-tbl" cellspacing="0" cellpadding="0">', "<tbody>", "<tr>", '<td class="ext-cal-gutter"></td>', '<td class="ext-cal-hd-days-td"><div class="ext-cal-hd-ad-inner">{allDayTpl}</div></td>', '<td class="ext-cal-gutter-rt"></td>', "</tr>", "</tbody>", "</table>", "</div>") }, applyTemplate: function (e) { var t = { allDayTpl: this.allDayTpl.apply(e) }; return Ext.getVersion().isLessThan("4.1") ? Extensible.calendar.template.DayHeader.superclass.applyTemplate.call(this, t) : this.applyOut(t, []).join("") } }, function () { this.createAlias("apply", "applyTemplate") }), Ext.define("Extensible.calendar.template.DayBody", { extend: "Ext.XTemplate", constructor: function (e) { Ext.apply(this, e), Extensible.calendar.template.DayBody.superclass.constructor.call(this, '<table class="ext-cal-bg-tbl" cellspacing="0" cellpadding="0" style="height:{dayHeight}px;">', "<tbody>", '<tr height="1">', '<td class="ext-cal-gutter"></td>', '<td colspan="{dayCount}">', '<div class="ext-cal-bg-rows">', '<div class="ext-cal-bg-rows-inner">', '<tpl for="times">', '<div class="ext-cal-bg-row ext-row-{[xindex]}" style="height:{parent.hourHeight}px;">', '<div class="ext-cal-bg-row-div {parent.hourSeparatorCls}" style="height:{parent.hourSeparatorHeight}px;"></div>', "</div>", "</tpl>", "</div>", "</div>", "</td>", "</tr>", "<tr>", '<td class="ext-cal-day-times">', '<tpl for="times">', '<div class="ext-cal-bg-row" style="height:{parent.hourHeight}px;">', '<div class="ext-cal-day-time-inner"  style="height:{parent.hourHeight-1}px;">{.}</div>', "</div>", "</tpl>", "</td>", '<tpl for="days">', '<td class="ext-cal-day-col">', '<div class="ext-cal-day-col-inner">', '<div id="{[this.id]}-day-col-{.:date("Ymd")}" class="ext-cal-day-col-gutter" style="height:{parent.dayHeight}px;"></div>', "</div>", "</td>", "</tpl>", "</tr>", "</tbody>", "</table>") }, applyTemplate: function (e) { this.today = Extensible.Date.today(), this.dayCount = this.dayCount || 1; var t = 0, n = [], r = Ext.Date.clone(e.viewStart); for (; t < this.dayCount; t++) n[t] = Extensible.Date.add(r, { days: t }); var i = [], s = this.viewStartHour, o = this.viewEndHour, u = this.hourIncrement, a = this.hourHeight * (o - s), f = Extensible.Date.use24HourTime ? "G:i" : "ga", l; r = Extensible.Date.add(new Date("5/26/1972"), { hours: s }); for (t = s; t < o; t++) i.push(Ext.Date.format(r, f)), r = Extensible.Date.add(r, { minutes: u }); return l = { days: n, dayCount: n.length, times: i, hourHeight: this.hourHeight, hourSeparatorCls: this.showHourSeparator ? "" : "no-sep", dayHeight: a, hourSeparatorHeight: this.hourHeight / 2 }, Ext.getVersion().isLessThan("4.1") ? Extensible.calendar.template.DayBody.superclass.applyTemplate.call(this, l) : this.applyOut(l, []).join("") } }, function () { this.createAlias("apply", "applyTemplate") }), Ext.define("Extensible.calendar.template.Month", { extend: "Ext.XTemplate", requires: ["Extensible.calendar.template.BoxLayout"], dayHeaderFormat: "D", dayHeaderTitleFormat: "l, F j, Y", constructor: function (e) { Ext.apply(this, e), this.weekTpl = Ext.create("Extensible.calendar.template.BoxLayout", e), this.weekTpl.compile(); var t = this.showWeekLinks ? '<div class="ext-cal-week-link-hd">&#160;</div>' : ""; Extensible.calendar.template.Month.superclass.constructor.call(this, '<div class="ext-cal-inner-ct {extraClasses}">', '<div class="ext-cal-hd-ct ext-cal-month-hd">', t, '<table class="ext-cal-hd-days-tbl" cellpadding="0" cellspacing="0">', "<tbody>", "<tr>", '<tpl for="days">', '<th class="ext-cal-hd-day{[xindex==1 ? " ext-cal-day-first" : ""]}" title="{title}">{name}</th>', "</tpl>", "</tr>", "</tbody>", "</table>", "</div>", '<div class="ext-cal-body-ct">{weeks}</div>', "</div>") }, applyTemplate: function (e) { var t = [], n = this.weekTpl.apply(e), r = e.viewStart, i = Extensible.Date, s; for (var o = 0; o < 7; o++) { var u = i.add(r, { days: o }); t.push({ name: Ext.Date.format(u, this.dayHeaderFormat), title: Ext.Date.format(u, this.dayHeaderTitleFormat) }) } var a = this.showHeader === !0 ? "" : "ext-cal-noheader"; return this.showWeekLinks && (a += " ext-cal-week-links"), s = { days: t, weeks: n, extraClasses: a }, Ext.getVersion().isLessThan("4.1") ? Extensible.calendar.template.Month.superclass.applyTemplate.call(this, s) : this.applyOut(s, []).join("") } }, function () { this.createAlias("apply", "applyTemplate") }), Ext.define("Ext.dd.ScrollManager", { singleton: !0, requires: ["Ext.dd.DragDropManager"], constructor: function () { var e = Ext.dd.DragDropManager; e.fireEvents = Ext.Function.createSequence(e.fireEvents, this.onFire, this), e.stopDrag = Ext.Function.createSequence(e.stopDrag, this.onStop, this), this.doScroll = Ext.Function.bind(this.doScroll, this), this.ddmInstance = e, this.els = {}, this.dragEl = null, this.proc = {} }, onStop: function (e) { this.dragEl = null, this.clearProc() }, triggerRefresh: function () { this.ddmInstance.dragCurrent && this.ddmInstance.refreshCache(this.ddmInstance.dragCurrent.groups) }, doScroll: function () { if (this.ddmInstance.dragCurrent) { var e = this.proc, t = e.el, n = e.el.ddScrollConfig, r = n ? n.increment : this.increment; this.animate ? t.scroll(e.dir, r, !0, this.animDuration, this.triggerRefresh) : t.scroll(e.dir, r) && this.triggerRefresh() } }, clearProc: function () { var e = this.proc; e.id && clearInterval(e.id), e.id = 0, e.el = null, e.dir = "" }, startProc: function (e, t) { this.clearProc(), this.proc.el = e, this.proc.dir = t; var n = e.ddScrollConfig ? e.ddScrollConfig.ddGroup : undefined, r = e.ddScrollConfig && e.ddScrollConfig.frequency ? e.ddScrollConfig.frequency : this.frequency; if (n === undefined || this.ddmInstance.dragCurrent.ddGroup == n) this.proc.id = setInterval(this.doScroll, r) }, onFire: function (e, t) { if (t || !this.ddmInstance.dragCurrent) return; if (!this.dragEl || this.dragEl != this.ddmInstance.dragCurrent) this.dragEl = this.ddmInstance.dragCurrent, this.refreshCache(); var n = e.getXY(), r = e.getPoint(), i = this.proc, s = this.els; for (var o in s) { var u = s[o], a = u._region, f = u.ddScrollConfig ? u.ddScrollConfig : this; if (a && a.contains(r) && u.isScrollable()) { if (a.bottom - r.y <= f.vthresh) { i.el != u && this.startProc(u, "down"); return } if (a.right - r.x <= f.hthresh) { i.el != u && this.startProc(u, "left"); return } if (r.y - a.top <= f.vthresh) { i.el != u && this.startProc(u, "up"); return } if (r.x - a.left <= f.hthresh) { i.el != u && this.startProc(u, "right"); return } } } this.clearProc() }, register: function (e) { if (Ext.isArray(e)) for (var t = 0, n = e.length; t < n; t++) this.register(e[t]); else e = Ext.get(e), this.els[e.id] = e }, unregister: function (e) { if (Ext.isArray(e)) for (var t = 0, n = e.length; t < n; t++) this.unregister(e[t]); else e = Ext.get(e), delete this.els[e.id] }, vthresh: 25, hthresh: 25, increment: 100, frequency: 500, animate: !0, animDuration: .4, ddGroup: undefined, refreshCache: function () { var e = this.els, t; for (t in e) typeof e[t] == "object" && (e[t]._region = e[t].getRegion()) } }), Ext.define("Extensible.calendar.dd.StatusProxy", { extend: "Ext.dd.StatusProxy", moveEventCls: "ext-cal-dd-move", addEventCls: "ext-cal-dd-add", renderTpl: ['<div class="' + Ext.baseCSSPrefix + 'dd-drop-icon"></div>', '<div class="ext-dd-ghost-ct">', '<div id="{id}-ghost" class="' + Ext.baseCSSPrefix + 'dd-drag-ghost"></div>', '<div id="{id}-message" class="ext-dd-msg"></div>', "</div>"], childEls: ["ghost", "message"], constructor: function (e) { Ext.getVersion().isLessThan("4.1") ? this.preComponentConstructor(e) : this.callParent(arguments) }, preComponentConstructor: function (e) { var t = this; Ext.apply(t, e), t.id = t.id || Ext.id(), t.proxy = Ext.createWidget("component", { floating: !0, id: t.id || Ext.id(), html: t.renderTpl.join(""), cls: Ext.baseCSSPrefix + "dd-drag-proxy " + t.dropNotAllowed, shadow: !e || e.shadow !== !1, renderTo: document.body }), t.el = t.proxy.el, t.el.show(), t.el.setVisibilityMode(Ext.core.Element.VISIBILITY), t.el.hide(), t.ghost = Ext.get(t.el.dom.childNodes[1].childNodes[0]), t.message = Ext.get(t.el.dom.childNodes[1].childNodes[1]), t.dropStatus = t.dropNotAllowed }, update: function (e) { this.callParent(arguments); var t = this.ghost.dom.firstChild; t && Ext.fly(t).setHeight("auto") }, updateMsg: function (e) { this.message.update(e) } }), Ext.define("Extensible.calendar.dd.DragZone", { extend: "Ext.dd.DragZone", requires: ["Extensible.calendar.dd.StatusProxy", "Extensible.calendar.data.EventMappings"], ddGroup: "CalendarDD", eventSelector: ".ext-cal-evt", constructor: function (e, t) { Extensible.calendar._statusProxyInstance || (Extensible.calendar._statusProxyInstance = Ext.create("Extensible.calendar.dd.StatusProxy")), this.proxy = Extensible.calendar._statusProxyInstance, this.callParent(arguments) }, getDragData: function (e) { var t = e.getTarget(this.eventSelector, 3); if (t) { var n = this.view.getEventRecordFromEl(t); if (!n) return; return { type: "eventdrag", ddel: t, eventStart: n.data[Extensible.calendar.data.EventMappings.StartDate.name], eventEnd: n.data[Extensible.calendar.data.EventMappings.EndDate.name], proxy: this.proxy } } return t = this.view.getDayAt(e.getX(), e.getY()), t.el ? { type: "caldrag", start: t.date, proxy: this.proxy } : null }, onInitDrag: function (e, t) { if (this.dragData.ddel) { var n = this.dragData.ddel.cloneNode(!0), r = Ext.fly(n).down("dl"); Ext.fly(n).setWidth("auto"), r && r.setHeight("auto"), this.proxy.update(n), this.onStartDrag(e, t) } else this.dragData.start && this.onStartDrag(e, t); return this.view.onInitDrag(), !0 }, afterRepair: function () { Ext.enableFx && this.dragData.ddel && Ext.Element.fly(this.dragData.ddel).highlight(this.hlColor || "c3daf9"), this.dragging = !1 }, getRepairXY: function (e) { if (this.dragData.ddel) return Ext.Element.fly(this.dragData.ddel).getXY() }, afterInvalidDrop: function (e, t) { Ext.select(".ext-dd-shim").hide() }, destroy: function () { this.callParent(arguments), delete Extensible.calendar._statusProxyInstance } }), Ext.define("Extensible.calendar.dd.DropZone", { extend: "Ext.dd.DropZone", requires: ["Ext.Layer", "Extensible.calendar.data.EventMappings"], ddGroup: "CalendarDD", eventSelector: ".ext-cal-evt", dateRangeFormat: "{0}-{1}", dateFormat: "n/j", shims: [], getTargetFromEvent: function (e) { var t = this.dragOffset || 0, n = e.getPageY() - t, r = this.view.getDayAt(e.getPageX(), n); return r.el ? r : null }, onNodeOver: function (e, t, n, r) { var i = Extensible.Date, s = r.type == "eventdrag" ? e.date : i.min(r.start, e.date), o = r.type == "eventdrag" ? i.add(e.date, { days: i.diffDays(r.eventStart, r.eventEnd) }) : i.max(r.start, e.date); if (!this.dragStartDate || !this.dragEndDate || i.diffDays(s, this.dragStartDate) != 0 || i.diffDays(o, this.dragEndDate) != 0) { this.dragStartDate = s, this.dragEndDate = i.add(o, { days: 1, millis: -1, clearTime: !0 }), this.shim(s, o); var u = Ext.Date.format(s, this.dateFormat); i.diffDays(s, o) > 0 && (o = Ext.Date.format(o, this.dateFormat), u = Ext.String.format(this.dateRangeFormat, u, o)); var a = Ext.String.format(r.type == "eventdrag" ? this.moveText : this.createText, u); r.proxy.updateMsg(a) } return this.dropAllowed }, shim: function (e, t) { this.currWeek = -1; var n = Ext.Date.clone(e), r = 0, i, s, o = Extensible.Date, u = o.diffDays(n, t) + 1; Ext.each(this.shims, function (e) { e && (e.isActive = !1) }); while (r++ < u) { var a = this.view.getDayEl(n); if (a) { var f = this.view.getWeekIndex(n), i = this.shims[f]; i || (i = this.createShim(), this.shims[f] = i), f != this.currWeek ? (i.boxInfo = a.getBox(), this.currWeek = f) : (s = a.getBox(), i.boxInfo.right = s.right, i.boxInfo.width = s.right - i.boxInfo.x), i.isActive = !0 } n = o.add(n, { days: 1 }) } Ext.each(this.shims, function (e) { e && (e.isActive ? (e.show(), e.setBox(e.boxInfo)) : e.isVisible() && e.hide()) }) }, createShim: function () { var e = this.view.ownerCalendarPanel ? this.view.ownerCalendarPanel : this.view; this.shimCt || (this.shimCt = Ext.get("ext-dd-shim-ct-" + e.id), this.shimCt || (this.shimCt = document.createElement("div"), this.shimCt.id = "ext-dd-shim-ct-" + e.id, e.getEl().parent().appendChild(this.shimCt))); var t = document.createElement("div"); return t.className = "ext-dd-shim", this.shimCt.appendChild(t), Ext.create("Ext.Layer", { shadow: !1, useDisplay: !0, constrain: !1 }, t) }, clearShims: function () { Ext.each(this.shims, function (e) { e && e.hide() }) }, onContainerOver: function (e, t, n) { return this.dropAllowed }, onCalendarDragComplete: function () { delete this.dragStartDate, delete this.dragEndDate, this.clearShims() }, onNodeDrop: function (e, t, n, r) { if (e && r) { if (r.type == "eventdrag") { var i = this.view.getEventRecordFromEl(r.ddel), s = Extensible.Date.copyTime(i.data[Extensible.calendar.data.EventMappings.StartDate.name], e.date); return this.view.onEventDrop(i, s), this.onCalendarDragComplete(), !0 } if (r.type == "caldrag") return this.view.onCalendarEndDrag(this.dragStartDate, this.dragEndDate, Ext.bind(this.onCalendarDragComplete, this)), !0 } return this.onCalendarDragComplete(), !1 }, onContainerDrop: function (e, t, n) { return this.onCalendarDragComplete(), !1 }, destroy: function () { Ext.each(this.shims, function (e) { e && Ext.destroy(e) }), Ext.removeNode(this.shimCt), delete this.shimCt, this.shims.length = 0 } }), Ext.define("Extensible.calendar.dd.DayDragZone", { extend: "Extensible.calendar.dd.DragZone", ddGroup: "DayViewDD", resizeSelector: ".ext-evt-rsz", getDragData: function (e) { var t = e.getTarget(this.resizeSelector, 2, !0); if (t) { var n = t.parent(this.eventSelector), r = this.view.getEventRecordFromEl(n); if (!r) return; return { type: "eventresize", xy: e.getXY(), ddel: n.dom, eventStart: r.data[Extensible.calendar.data.EventMappings.StartDate.name], eventEnd: r.data[Extensible.calendar.data.EventMappings.EndDate.name], proxy: this.proxy } } var t = e.getTarget(this.eventSelector, 3); if (t) { var r = this.view.getEventRecordFromEl(t); if (!r) return; return { type: "eventdrag", xy: e.getXY(), ddel: t, eventStart: r.data[Extensible.calendar.data.EventMappings.StartDate.name], eventEnd: r.data[Extensible.calendar.data.EventMappings.EndDate.name], proxy: this.proxy } } return t = this.view.getDayAt(e.getX(), e.getY()), t.el ? { type: "caldrag", dayInfo: t, proxy: this.proxy } : null } }), Ext.define("Extensible.calendar.dd.DayDropZone", { extend: "Extensible.calendar.dd.DropZone", ddGroup: "DayViewDD", dateRangeFormat: "{0}-{1}", dateFormat: "n/j", onNodeOver: function (e, t, n, r) { var i, s = this.createText, o = Extensible.Date.use24HourTime ? "G:i" : "g:ia"; if (r.type == "caldrag") { this.dragStartMarker || (this.dragStartMarker = e.el.parent().createChild({ style: "position:absolute;" }), this.dragStartMarker.setBox(r.dayInfo.timeBox), this.dragCreateDt = r.dayInfo.date); var u, a = this.dragStartMarker.getBox(); a.height = Math.ceil(Math.abs(n.getY() - a.y) / e.timeBox.height) * e.timeBox.height, n.getY() < a.y ? (a.height += e.timeBox.height, a.y = a.y - a.height + e.timeBox.height, u = Extensible.Date.add(this.dragCreateDt, { minutes: this.ddIncrement })) : e.date = Extensible.Date.add(e.date, { minutes: this.ddIncrement }), this.shim(this.dragCreateDt, a); var f = Extensible.Date.diff(this.dragCreateDt, e.date), l = Extensible.Date.add(this.dragCreateDt, { millis: f }); this.dragStartDate = Extensible.Date.min(this.dragCreateDt, l), this.dragEndDate = u || Extensible.Date.max(this.dragCreateDt, l), i = Ext.String.format(this.dateRangeFormat, Ext.Date.format(this.dragStartDate, o), Ext.Date.format(this.dragEndDate, o)) } else { var c = Ext.get(r.ddel), h = c.parent().parent(), a = c.getBox(); a.width = h.getWidth(); if (r.type == "eventdrag") { if (this.dragOffset === undefined) { var p = this.view.getDayAt(r.xy[0], r.xy[1]).timeBox; this.dragOffset = p.y - a.y } else a.y = e.timeBox.y; i = Ext.Date.format(e.date, this.dateFormat + " " + o), a.x = e.el.getLeft(), this.shim(e.date, a), s = this.moveText } if (r.type == "eventresize") { this.resizeDt || (this.resizeDt = e.date), a.x = h.getLeft(), a.height = Math.ceil(Math.abs(n.getY() - a.y) / e.timeBox.height) * e.timeBox.height, n.getY() < a.y ? a.y -= a.height : e.date = Extensible.Date.add(e.date, { minutes: this.ddIncrement }), this.shim(this.resizeDt, a); var f = Extensible.Date.diff(this.resizeDt, e.date), l = Extensible.Date.add(this.resizeDt, { millis: f }), d = Extensible.Date.min(r.eventStart, l), v = Extensible.Date.max(r.eventStart, l); r.resizeDates = { StartDate: d, EndDate: v }, i = Ext.String.format(this.dateRangeFormat, Ext.Date.format(d, o), Ext.Date.format(v, o)), s = this.resizeText } } return r.proxy.updateMsg(Ext.String.format(s, i)), this.dropAllowed }, shim: function (e, t) { Ext.each(this.shims, function (e) { e && (e.isActive = !1, e.hide()) }); var n = this.shims[0]; n || (n = this.createShim(), this.shims[0] = n), n.isActive = !0, n.show(), n.setBox(t) }, onNodeDrop: function (e, t, n, r) { if (e && r) { if (r.type == "eventdrag") { var i = this.view.getEventRecordFromEl(r.ddel); return this.view.onEventDrop(i, e.date), this.onCalendarDragComplete(), delete this.dragOffset, !0 } if (r.type == "eventresize") { var i = this.view.getEventRecordFromEl(r.ddel); return this.view.onEventResize(i, r.resizeDates), this.onCalendarDragComplete(), delete this.resizeDt, !0 } if (r.type == "caldrag") return Ext.destroy(this.dragStartMarker), delete this.dragStartMarker, delete this.dragCreateDt, this.view.onCalendarEndDrag(this.dragStartDate, this.dragEndDate, Ext.bind(this.onCalendarDragComplete, this)), !0 } return this.onCalendarDragComplete(), !1 } }), Ext.define("Extensible.calendar.data.EventModel", { extend: "Ext.data.Model", requires: ["Ext.util.MixedCollection", "Extensible.calendar.data.EventMappings"], statics: { reconfigure: function () { var e = Extensible.calendar.data, t = e.EventMappings, n = e.EventModel.prototype, r = []; n.idProperty = t.EventId.name || "id"; for (prop in t) t.hasOwnProperty(prop) && r.push(t[prop]); n.fields.clear(); for (var i = 0, s = r.length; i < s; i++) n.fields.add(Ext.create("Ext.data.Field", r[i])); return e.EventModel } } }, function () { Extensible.calendar.data.EventModel.reconfigure() }), Ext.define("Extensible.calendar.data.EventStore", { extend: "Ext.data.Store", model: "Extensible.calendar.data.EventModel", constructor: function (e) { e = e || {}, this.deferLoad = e.autoLoad, e.autoLoad = !1, this.callParent(arguments) }, load: function (e) { Extensible.log("store load"), e = e || {}, e.params && delete this.initialParams, this.initialParams && (e.params = e.params || {}, Ext.apply(e.params, this.initialParams), delete this.initialParams), this.callParent(arguments) } }), Ext.define("Extensible.calendar.data.CalendarModel", { extend: "Ext.data.Model", requires: ["Ext.util.MixedCollection", "Extensible.calendar.data.CalendarMappings"], statics: { reconfigure: function () { var e = Extensible.calendar.data, t = e.CalendarMappings, n = e.CalendarModel.prototype, r = []; n.idProperty = t.CalendarId.name || "id"; for (prop in t) t.hasOwnProperty(prop) && r.push(t[prop]); n.fields.clear(); for (var i = 0, s = r.length; i < s; i++) n.fields.add(Ext.create("Ext.data.Field", r[i])); return e.CalendarModel } } }, function () { Extensible.calendar.data.CalendarModel.reconfigure() }), Ext.define("Extensible.calendar.data.MemoryCalendarStore", { extend: "Ext.data.Store", model: "Extensible.calendar.data.CalendarModel", requires: ["Ext.data.proxy.Memory", "Ext.data.reader.Json", "Ext.data.writer.Json", "Extensible.calendar.data.CalendarModel", "Extensible.calendar.data.CalendarMappings"], proxy: { type: "memory", reader: { type: "json", root: "calendars" }, writer: { type: "json" } }, autoLoad: !0, initComponent: function () { this.sorters = this.sorters || [{ property: Extensible.calendar.data.CalendarMappings.Title.name, direction: "ASC" }], this.idProperty = this.idProperty || Extensible.calendar.data.CalendarMappings.CalendarId.name || "id", this.fields = Extensible.calendar.data.CalendarModel.prototype.fields.getRange(), this.callParent(arguments) } }), Ext.define("Extensible.calendar.data.MemoryEventStore", { extend: "Ext.data.Store", model: "Extensible.calendar.data.EventModel", requires: ["Ext.data.proxy.Memory", "Ext.data.reader.Json", "Ext.data.writer.Json", "Extensible.calendar.data.EventModel", "Extensible.calendar.data.EventMappings"], proxy: { type: "memory", reader: { type: "json", root: "evts" }, writer: { type: "json" } }, constructor: function (e) { e = e || {}, this.callParent(arguments), this.sorters = this.sorters || [{ property: Extensible.calendar.data.EventMappings.StartDate.name, direction: "ASC" }], this.idProperty = this.idProperty || Extensible.calendar.data.EventMappings.EventId.mapping || "id", this.fields = Extensible.calendar.data.EventModel.prototype.fields.getRange(), e.autoMsg !== !1 && this.on("write", this.onWrite, this), this.autoMsg = e.autoMsg, this.onCreateRecords = Ext.Function.createInterceptor(this.onCreateRecords, this.interceptCreateRecords), this.initRecs() }, interceptCreateRecords: function (e, t, n) { if (n) { var r = 0, i, s = e.length; for (; r < s; r++) e[r].data[Extensible.calendar.data.EventMappings.EventId.name] = e[r].id } }, initRecs: function () { this.each(function (e) { e.store = this, e.phantom = !1 }, this) }, onWrite: function (e, t) { var n = this; if (Extensible.example && Extensible.example.msg) { var r = t.wasSuccessful(), i = t.getRecords()[0], s = i.data[Extensible.calendar.data.EventMappings.Title.name]; switch (t.action) { case "create": Extensible.example.msg("Add", 'Added "' + Ext.value(s, "(No title)") + '"'); break; case "update": Extensible.example.msg("Update", 'Updated "' + Ext.value(s, "(No title)") + '"'); break; case "destroy": Extensible.example.msg("Delete", 'Deleted "' + Ext.value(s, "(No title)") + '"') } } }, onProxyLoad: function (e) { var t = this, n; if (t.data && t.data.length > 0) t.totalCount = t.data.length, n = t.data.items; else { var r = e.getResultSet(), i = e.wasSuccessful(); n = e.getRecords(), r && (t.totalCount = r.total), i && t.loadRecords(n, e) } t.loading = !1, t.fireEvent("load", t, n, i) } }), Ext.define("Extensible.calendar.util.WeekEventRenderer", { requires: ["Ext.core.DomHelper"], statics: { getEventRow: function (e, t, n) { var r = 1, i = Ext.get(e + "-wk-" + t), s, o; return i && (o = i.child(".ext-cal-evt-tbl", !0), s = o.tBodies[0].childNodes[n + r], s || (s = Ext.core.DomHelper.append(o.tBodies[0], "<tr></tr>"))), Ext.get(s) }, renderEvent: function (e, t, n, r, i, s, o) { var u = Extensible.calendar.data.EventMappings, a = e.data || e.event.data, f = Ext.Date.clone(s), l = Extensible.Date.add(f, { days: i - n, millis: -1 }), c = this.getEventRow(o.viewId, t, r), h = Extensible.Date.diffDays(s, a[u.EndDate.name]) + 1, p = Math.min(h, i - n); a._weekIndex = t, a._renderAsAllDay = a[u.IsAllDay.name] || e.isSpanStart, a.spanLeft = a[u.StartDate.name].getTime() < f.getTime(), a.spanRight = a[u.EndDate.name].getTime() > l.getTime(), a.spanCls = a.spanLeft ? a.spanRight ? "ext-cal-ev-spanboth" : "ext-cal-ev-spanleft" : a.spanRight ? "ext-cal-ev-spanright" : ""; var d = { tag: "td", cls: "ext-cal-ev", cn: o.tpl.apply(o.templateDataFn(a)) }; p > 1 && (d.colspan = p), Ext.core.DomHelper.append(c, d) }, render: function (e) { var t = this, n = "&#160;", r = 0, i = e.eventGrid, s = Ext.Date.clone(e.viewStart), o = "", u = e.tpl, a = e.maxEventsPerDay != undefined ? e.maxEventsPerDay : 999, f = e.weekCount < 1 ? 6 : e.weekCount, l = e.weekCount == 1 ? e.dayCount : 7, c, h, p, d, v, m, g, y, b, w; for (; r < f; r++) { h = 0, p = i[r]; for (; h < l; h++) { if (p && p[h]) { d = 0, v = 0, m = p[h], g = m.length, o = Ext.Date.format(s, "Ymd"); for (; d < g; d++) if (!m[d]) { if (d >= a) continue; c = t.getEventRow(e.viewId, r, d), Ext.core.DomHelper.append(c, { tag: "td", cls: "ext-cal-ev", html: n, id: e.viewId + "-empty-" + g + "-day-" + o }) } else { if (d >= a) { v++; continue } y = m[d], (!y.isSpan || y.isSpanStart) && t.renderEvent(y, r, h, d, l, s, e) } if (v > 0) c = t.getEventRow(e.viewId, r, a), Ext.core.DomHelper.append(c, { tag: "td", cls: "ext-cal-ev-more", id: "ext-cal-ev-more-" + Ext.Date.format(s, "Ymd"), cn: { tag: "a", html: Ext.String.format(e.getMoreText(v), v) } }); else if (g < e.evtMaxCount[r]) { c = t.getEventRow(e.viewId, r, g); if (c) { b = { tag: "td", cls: "ext-cal-ev", html: n, id: e.viewId + "-empty-" + (g + 1) + "-day-" + o }; var E = e.evtMaxCount[r] - g; E > 1 && (b.rowspan = E), Ext.core.DomHelper.append(c, b) } } } else c = t.getEventRow(e.viewId, r, 0), c && (b = { tag: "td", cls: "ext-cal-ev", html: n, id: e.viewId + "-empty-day-" + o }, e.evtMaxCount[r] > 1 && (b.rowspan = e.evtMaxCount[r]), Ext.core.DomHelper.append(c, b)); s = Extensible.Date.add(s, { days: 1 }) } } } } }), Ext.define("Extensible.calendar.form.field.CalendarCombo", { extend: "Ext.form.field.ComboBox", alias: "widget.extensible.calendarcombo", requires: ["Extensible.calendar.data.CalendarMappings"], fieldLabel: "Calendar", triggerAction: "all", queryMode: "local", forceSelection: !0, selectOnFocus: !0, defaultCls: "x-cal-default", hiddenCalendarCls: "ext-cal-hidden", initComponent: function () { this.valueField = Extensible.calendar.data.CalendarMappings.CalendarId.name, this.displayField = Extensible.calendar.data.CalendarMappings.Title.name, this.listConfig = Ext.apply(this.listConfig || {}, { getInnerTpl: this.getListItemTpl }), this.store.on("update", this.refreshColorCls, this), this.callParent(arguments) }, getListItemTpl: function (e) { return '<div class="x-combo-list-item x-cal-{' + Extensible.calendar.data.CalendarMappings.ColorId.name + '}"><div class="ext-cal-picker-icon">&#160;</div>{' + e + "}</div>" }, afterRender: function () { this.callParent(arguments), this.wrap = this.el.down(".x-form-item-body"), this.wrap.addCls("ext-calendar-picker"), this.icon = Ext.core.DomHelper.append(this.wrap, { tag: "div", cls: "ext-cal-picker-icon ext-cal-picker-mainicon" }) }, refreshColorCls: function () { var e = this, t = Extensible.calendar.data.CalendarMappings, n = "", r = e.getValue(); return e.wrap ? (e.currentStyleClss !== undefined && e.wrap.removeCls(e.currentStyleClss), Ext.isEmpty(r) || (Ext.isArray(r) && (r = r[0]), r.data || (r = this.store.findRecord(t.CalendarId.name, r)), n = "x-cal-" + (r.data ? r.data[t.ColorId.name] : r)), e.currentStyleClss = n, e.wrap.addCls(n), e) : e }, setValue: function (e) { !e && this.store.getCount() > 0 && (e = this.store.getAt(0).data[Extensible.calendar.data.CalendarMappings.CalendarId.name]), this.callParent(arguments), this.refreshColorCls() } }), Ext.define("Extensible.form.recurrence.Combo", {
     extend: "Ext.form.ComboBox", alias: "widget.extensible.recurrencecombo", requires
    : ["Ext.data.ArrayStore"], width: 160, fieldLabel: "Repeats", mode: "local", triggerAction: "all", forceSelection: !0, displayField: "pattern", valueField: "id", recurrenceText: { none: "Does not repeat", daily: "Daily", weekly: "Weekly", monthly: "Monthly", yearly: "Yearly" }, initComponent: function () { this.callParent(arguments), this.addEvents("recurrencechange"), this.store = this.store || Ext.create("Ext.data.ArrayStore", { fields: ["id", "pattern"], idIndex: 0, data: [["NONE", this.recurrenceText.none], ["DAILY", this.recurrenceText.daily], ["WEEKLY", this.recurrenceText.weekly], ["MONTHLY", this.recurrenceText.monthly], ["YEARLY", this.recurrenceText.yearly]] }) }, initValue: function () { this.callParent(arguments), this.value != undefined && this.fireEvent("recurrencechange", this.value) }, setValue: function (e) { var t = this.value; return this.callParent(arguments), t != e && this.fireEvent("recurrencechange", e), this }
 }), Ext.define("Extensible.form.recurrence.Fieldset", { extend: "Ext.form.Field", alias: "widget.extensible.recurrencefield", requires: ["Extensible.form.recurrence.Combo"], fieldLabel: "Repeats", startDate: Ext.Date.clearTime(new Date), enableFx: !0, initComponent: function () { this.callParent(arguments), this.height || (this.autoHeight = !0) }, onRender: function (e, t) { this.el || (this.frequencyCombo = Ext.create("Extensible.form.recurrence.Combo", { id: this.id + "-frequency", listeners: { recurrencechange: { fn: this.showOptions, scope: this } } }), this.fieldLabel && (this.frequencyCombo.fieldLabel = this.fieldLabel), this.innerCt = Ext.create("Ext.Container", { cls: "extensible-recur-inner-ct", items: [] }), this.fieldCt = Ext.create("Ext.Container", { autoEl: { id: this.id }, cls: "extensible-recur-ct", renderTo: e, items: [this.frequencyCombo, this.innerCt] }), this.fieldCt.ownerCt = this, this.innerCt.ownerCt = this.fieldCt, this.el = this.fieldCt.getEl(), this.items = Ext.create("Ext.util.MixedCollection"), this.items.addAll(this.initSubComponents())), this.callParent(arguments) }, initValue: function () { this.setStartDate(this.startDate), this.value !== undefined ? this.setValue(this.value) : this.frequency !== undefined ? this.setValue("FREQ=" + this.frequency) : this.setValue("NONE"), this.originalValue = this.getValue() }, showOptions: function (e) { var t = !1, n = "day"; e != "NONE" && this.hideSubPanels(), this.frequency = e; switch (e) { case "DAILY": t = this.showSubPanel(this.repeatEvery), t |= this.showSubPanel(this.until); break; case "WEEKLY": t = this.showSubPanel(this.repeatEvery), t |= this.showSubPanel(this.weekly), t |= this.showSubPanel(this.until), n = "week"; break; case "MONTHLY": t = this.showSubPanel(this.repeatEvery), t |= this.showSubPanel(this.monthly), t |= this.showSubPanel(this.until), n = "month"; break; case "YEARLY": t = this.showSubPanel(this.repeatEvery), t |= this.showSubPanel(this.yearly), t |= this.showSubPanel(this.until), n = "year"; break; default: this.hideInnerCt(); return } t && this.innerCt.doLayout(), this.showInnerCt(), this.repeatEvery.updateLabel(n) }, showSubPanel: function (e) { return e.rendered ? (e.show(), !1) : (this.repeatEvery.rendered ? e = this.innerCt.insert(1, e) : e = this.innerCt.add(e), e.show(), !0) }, showInnerCt: function () { this.innerCt.isVisible() || (this.enableFx && Ext.enableFx ? this.innerCt.getPositionEl().slideIn("t", { duration: .3 }) : this.innerCt.show()) }, hideInnerCt: function () { this.innerCt.isVisible() && (this.enableFx && Ext.enableFx ? this.innerCt.getPositionEl().slideOut("t", { duration: .3, easing: "easeIn", callback: this.hideSubPanels, scope: this }) : (this.innerCt.hide(), this.hideSubPanels())) }, setStartDate: function (e) { this.items.each(function (t) { t.setStartDate(e) }) }, getValue: function () { if (!this.rendered) return this.value; if (this.frequency == "NONE") return ""; var e = "FREQ=" + this.frequency; return this.items.each(function (t) { t.isVisible() && (e += t.getValue()) }), e }, setValue: function (e) { this.value = e; if (e == null || e == "" || e == "NONE") return this.frequencyCombo.setValue("NONE"), this.showOptions("NONE"), this; var t = e.split(";"); return this.items.each(function (e) { e.setValue(t) }), Ext.each(t, function (e) { if (e.indexOf("FREQ") > -1) { var t = e.split("=")[1]; this.frequencyCombo.setValue(t), this.showOptions(t); return } }, this), this }, hideSubPanels: function () { this.items.each(function (e) { e.hide() }) }, initSubComponents: function () { return Extensible.calendar.recurrenceBase = Ext.extend(Ext.Container, { fieldLabel: " ", labelSeparator: "", hideLabel: !0, layout: "table", anchor: "100%", startDate: this.startDate, getSuffix: function (e) { if (!Ext.isNumber(e)) return ""; switch (e) { case 1: case 21: case 31: return "st"; case 2: case 22: return "nd"; case 3: case 23: return "rd"; default: return "th" } }, initNthCombo: function (e) { var e = Ext.getCmp(this.id + "-combo"), t = this.startDate, n = e.getStore(), r = t.getLastDateOfMonth().getDate(), i = t.getDate(), s = Ext.Date.format(t, "jS") + " day", o = this.id.indexOf("-yearly") > -1, u = " in " + Ext.Date.format(t, "F"), a, f, l, c, h, p, d; return a = Math.ceil(i / 7), f = a + this.getSuffix(a) + Ext.Date.format(t, " l"), o && (s += u, f += u), p = [[s], [f]], d = o ? u : "", r - i < 7 && p.push(["last " + Ext.Date.format(t, "l") + d]), r == i && p.push(["last day" + d]), h = n.find("field1", e.getValue()), n.removeAll(), e.clearValue(), n.loadData(p), h > p.length - 1 && (h = p.length - 1), e.setValue(n.getAt(h > -1 ? h : 0).data.field1), this }, setValue: Ext.emptyFn }), this.repeatEvery = new Extensible.calendar.recurrenceBase({ id: this.id + "-every", layoutConfig: { columns: 3 }, items: [{ xtype: "label", text: "Repeat every" }, { xtype: "numberfield", id: this.id + "-every-num", value: 1, width: 35, minValue: 1, maxValue: 99, allowBlank: !1, enableKeyEvents: !0, listeners: { keyup: { fn: function () { this.repeatEvery.updateLabel() }, scope: this } } }, { xtype: "label", id: this.id + "-every-label" }], setStartDate: function (e) { return this.startDate = e, this.updateLabel(), this }, getValue: function () { var e = Ext.getCmp(this.id + "-num").getValue(); return e > 1 ? ";INTERVAL=" + e : "" }, setValue: function (e) { var t = !1, n = Ext.isArray(e) ? e : e.split(";"); return Ext.each(n, function (e) { if (e.indexOf("INTERVAL") > -1) { var t = e.split("=")[1]; Ext.getCmp(this.id + "-num").setValue(t) } }, this), this }, updateLabel: function (e) { if (this.rendered) { var t = Ext.getCmp(this.id + "-num").getValue() == 1 ? "" : "s"; this.type = e ? e.toLowerCase() : this.type || "day"; var n = Ext.getCmp(this.id + "-label"); n.rendered && n.update(this.type + t + " beginning " + Ext.Date.format(this.startDate, "l, F j")) } return this }, afterRender: function () { this.callParent(arguments), this.updateLabel() } }), this.weekly = new Extensible.calendar.recurrenceBase({ id: this.id + "-weekly", layoutConfig: { columns: 2 }, items: [{ xtype: "label", text: "on:" }, { xtype: "checkboxgroup", id: this.id + "-weekly-days", items: [{ boxLabel: "Sun", name: "SU", id: this.id + "-weekly-SU" }, { boxLabel: "Mon", name: "MO", id: this.id + "-weekly-MO" }, { boxLabel: "Tue", name: "TU", id: this.id + "-weekly-TU" }, { boxLabel: "Wed", name: "WE", id: this.id + "-weekly-WE" }, { boxLabel: "Thu", name: "TH", id: this.id + "-weekly-TH" }, { boxLabel: "Fri", name: "FR", id: this.id + "-weekly-FR" }, { boxLabel: "Sat", name: "SA", id: this.id + "-weekly-SA" }] }], setStartDate: function (e) { return this.startDate = e, this.selectToday(), this }, selectToday: function () { this.clearValue(); var e = Ext.Date.format(this.startDate, "D").substring(0, 2).toUpperCase(); Ext.getCmp(this.id + "-days").setValue(e, !0) }, clearValue: function () { Ext.getCmp(this.id + "-days").setValue([!1, !1, !1, !1, !1, !1, !1]) }, getValue: function () { var e = "", t = Ext.getCmp(this.id + "-days").getValue(); Ext.each(t, function (t) { e.length > 0 && (e += ","), e += t.name }); var n = Ext.Date.format(this.startDate, "D").substring(0, 2).toUpperCase(); return e.length > 0 && e != n ? ";BYDAY=" + e : "" }, setValue: function (e) { var t = !1, n = Ext.isArray(e) ? e : e.split(";"); return this.clearValue(), Ext.each(n, function (e) { if (e.indexOf("BYDAY") > -1) { var n = e.split("=")[1].split(","), r = {}; return Ext.each(n, function (e) { r[e] = !0 }, this), Ext.getCmp(this.id + "-days").setValue(r), t = !0 } }, this), t || this.selectToday(), this } }), this.monthly = new Extensible.calendar.recurrenceBase({ id: this.id + "-monthly", layoutConfig: { columns: 3 }, items: [{ xtype: "label", text: "on the" }, { xtype: "combo", id: this.id + "-monthly-combo", mode: "local", width: 150, triggerAction: "all", forceSelection: !0, store: [] }, { xtype: "label", text: "of each month" }], setStartDate: function (e) { return this.startDate = e, this.initNthCombo(), this }, getValue: function () { var e = Ext.getCmp(this.id + "-combo"), t = e.getStore(), n = t.find("field1", e.getValue()), r = this.startDate, i = Ext.Date.format(r, "D").substring(0, 2).toUpperCase(); if (n > -1) switch (n) { case 0: return ";BYMONTHDAY=" + Ext.Date.format(r, "j"); case 1: return ";BYDAY=" + e.getValue()[0].substring(0, 1) + i; case 2: return ";BYDAY=-1" + i; default: return ";BYMONTHDAY=-1" } return "" } }), this.yearly = new Extensible.calendar.recurrenceBase({ id: this.id + "-yearly", layoutConfig: { columns: 3 }, items: [{ xtype: "label", text: "on the" }, { xtype: "combo", id: this.id + "-yearly-combo", mode: "local", width: 170, triggerAction: "all", forceSelection: !0, store: [] }, { xtype: "label", text: "each year" }], setStartDate: function (e) { return this.startDate = e, this.initNthCombo(), this }, getValue: function () { var e = Ext.getCmp(this.id + "-combo"), t = e.getStore(), n = t.find("field1", e.getValue()), r = this.startDate, i = Ext.Date.format(r, "D").substring(0, 2).toUpperCase(), s = ";BYMONTH=" + r.format("n"); if (n > -1) switch (n) { case 0: return s; case 1: return s + ";BYDAY=" + e.getValue()[0].substring(0, 1) + i; case 2: return s + ";BYDAY=-1" + i; default: return s + ";BYMONTHDAY=-1" } return "" } }), this.until = new Extensible.calendar.recurrenceBase({ id: this.id + "-until", untilDateFormat: "Ymd\\T000000\\Z", layoutConfig: { columns: 5 }, items: [{ xtype: "label", text: "and continuing" }, { xtype: "combo", id: this.id + "-until-combo", mode: "local", width: 85, triggerAction: "all", forceSelection: !0, value: "forever", store: ["forever", "for", "until"], listeners: { select: { fn: function (e, t) { var n = Ext.getCmp(this.id + "-until-date"); t.data.field1 == "until" ? (n.show(), n.getValue() == "" && (n.setValue(this.startDate.add(Date.DAY, 5)), n.setMinValue(this.startDate.clone().add(Date.DAY, 1)))) : n.hide(), t.data.field1 == "for" ? (Ext.getCmp(this.id + "-until-num").show(), Ext.getCmp(this.id + "-until-endlabel").show()) : (Ext.getCmp(this.id + "-until-num").hide(), Ext.getCmp(this.id + "-until-endlabel").hide()) }, scope: this } } }, { xtype: "datefield", id: this.id + "-until-date", showToday: !1, hidden: !0 }, { xtype: "numberfield", id: this.id + "-until-num", value: 5, width: 35, minValue: 1, maxValue: 99, allowBlank: !1, hidden: !0 }, { xtype: "label", id: this.id + "-until-endlabel", text: "occurrences", hidden: !0 }], setStartDate: function (e) { return this.startDate = e, this }, getValue: function () { var e = Ext.getCmp(this.id + "-date"); if (e.isVisible()) return ";UNTIL=" + Ext.String.format(e.getValue(), this.untilDateFormat); var t = Ext.getCmp(this.id + "-num"); return t.isVisible() ? ";COUNT=" + t.getValue() : "" }, setValue: function (e) { var t = !1, n = Ext.isArray(e) ? e : e.split(";"); return Ext.each(n, function (e) { if (e.indexOf("COUNT") > -1) { var t = e.split("=")[1]; Ext.getCmp(this.id + "-combo").setValue("for"), Ext.getCmp(this.id + "-num").setValue(t).show(), Ext.getCmp(this.id + "-endlabel").show() } else if (e.indexOf("UNTIL") > -1) { var n = e.split("=")[1]; Ext.getCmp(this.id + "-combo").setValue("until"), Ext.getCmp(this.id + "-date").setValue(Date.parseDate(n, this.untilDateFormat)).show(), Ext.getCmp(this.id + "-endlabel").hide() } }, this), this } }), [this.repeatEvery, this.weekly, this.monthly, this.yearly, this.until] } }), Ext.define("Extensible.form.field.DateRangeLayout", { extend: "Ext.layout.container.Container", alias: ["layout.extensible.daterange"], onLayout: function () { var e = this, t = e.getShadowCt(), n = e.owner, r = n.isSingleLine(); e.owner.suspendLayout = !0, r ? t.getComponent("row1").add(n.startDate, n.startTime, n.toLabel, n.endTime, n.endDate, n.allDay) : (t.getComponent("row1").add(n.startDate, n.startTime, n.toLabel), t.getComponent("row2").add(n.endDate, n.endTime, n.allDay)), t.rendered || t.render(e.getRenderTarget()), t.doComponentLayout(), n.setHeight(t.getHeight() - 5), delete e.owner.suspendLayout }, getShadowCt: function () { var e = this, t = []; return e.shadowCt || (e.shadowCt = Ext.createWidget("container", { layout: "auto", anchor: "100%", ownerCt: e.owner, items: [{ xtype: "container", itemId: "row1", layout: "hbox", defaults: { margins: "0 5 0 0" } }, { xtype: "container", itemId: "row2", layout: "hbox", defaults: { margins: "0 5 0 0" } }] })), e.shadowCt }, renderItems: Ext.emptyFn }), Ext.define("Extensible.form.field.DateRange", { extend: "Ext.form.FieldContainer", alias: "widget.extensible.daterangefield", requires: ["Ext.form.field.Date", "Ext.form.field.Time", "Ext.form.Label", "Ext.form.field.Checkbox"], toText: "to", allDayText: "All day", singleLine: !0, dateFormat: "n/j/Y", fieldLayout: { type: "hbox", defaultMargins: { top: 0, right: 5, bottom: 0, left: 0 } }, initComponent: function () { var e = this; e.timeFormat = e.timeFormat || (Extensible.Date.use24HourTime ? "G:i" : "g:i A"), e.addCls("ext-dt-range"), e.singleLine ? (e.layout = e.fieldLayout, e.items = e.getFieldConfigs()) : e.items = [{ xtype: "container", layout: e.fieldLayout, items: [e.getStartDateConfig(), e.getStartTimeConfig(), e.getDateSeparatorConfig()] }, { xtype: "container", layout: e.fieldLayout, items: [e.getEndDateConfig(), e.getEndTimeConfig(), e.getAllDayConfig()] }], e.callParent(arguments), e.initRefs() }, initRefs: function () { var e = this; e.startDate = e.down("#" + e.id + "-start-date"), e.startTime = e.down("#" + e.id + "-start-time"), e.endTime = e.down("#" + e.id + "-end-time"), e.endDate = e.down("#" + e.id + "-end-date"), e.allDay = e.down("#" + e.id + "-allday"), e.toLabel = e.down("#" + e.id + "-to-label") }, getFieldConfigs: function () { var e = this; return [e.getStartDateConfig(), e.getStartTimeConfig(), e.getDateSeparatorConfig(), e.getEndTimeConfig(), e.getEndDateConfig(), e.getAllDayConfig()] }, getLayoutItems: function (e) { var t = this; return e ? t.items.items : [[t.startDate, t.startTime, t.toLabel], [t.endDate, t.endTime, t.allDay]] }, getStartDateConfig: function () { return { xtype: "datefield", id: this.id + "-start-date", format: this.dateFormat, width: 100, listeners: { change: { fn: function () { this.onFieldChange("date", "start") }, scope: this } } } }, getStartTimeConfig: function () { return { xtype: "timefield", id: this.id + "-start-time", hidden: this.showTimes === !1, labelWidth: 0, hideLabel: !0, width: 90, format: this.timeFormat, listeners: { select: { fn: function () { this.onFieldChange("time", "start") }, scope: this } } } }, getEndDateConfig: function () { return { xtype: "datefield", id: this.id + "-end-date", format: this.dateFormat, hideLabel: !0, width: 100, listeners: { change: { fn: function () { this.onFieldChange("date", "end") }, scope: this } } } }, getEndTimeConfig: function () { return { xtype: "timefield", id: this.id + "-end-time", hidden: this.showTimes === !1, labelWidth: 0, hideLabel: !0, width: 90, format: this.timeFormat, listeners: { select: { fn: function () { this.onFieldChange("time", "end") }, scope: this } } } }, getAllDayConfig: function () { return { xtype: "checkbox", id: this.id + "-allday", hidden: this.showTimes === !1 || this.showAllDay === !1, boxLabel: this.allDayText, margins: { top: 2, right: 5, bottom: 0, left: 0 }, handler: this.onAllDayChange, scope: this } }, onAllDayChange: function (e, t) { this.startTime.setVisible(!t), this.endTime.setVisible(!t) }, getDateSeparatorConfig: function () { return { xtype: "label", id: this.id + "-to-label", text: this.toText, margins: { top: 4, right: 5, bottom: 0, left: 0 } } }, isSingleLine: function () { var e = this; if (e.calculatedSingleLine === undefined) if (e.singleLine == "auto") { var t = e.ownerCt.getEl(), n = e.ownerCt.getWidth() - t.getPadding("lr"), r = t.down(".x-panel-body"); r && (n -= r.getPadding("lr")), r = t.down(".x-form-item-label"), r && (n -= r.getWidth() - r.getPadding("lr")), singleLine = n <= e.singleLineMinWidth ? !1 : !0 } else e.calculatedSingleLine = e.singleLine !== undefined ? e.singleLine : !0; return e.calculatedSingleLine }, onFieldChange: function (e, t) { this.checkDates(e, t), this.fireEvent("change", this, this.getValue()) }, checkDates: function (e, t) { var n = this, r = e === "date" ? "Date" : "Time", i = this["start" + r], s = this["end" + r], o = n.getDT("start"), u = n.getDT("end"); o > u && (t == "start" ? s.setValue(o) : (i.setValue(u), n.checkDates(e, "start"))), e == "date" && n.checkDates("time", t) }, getValue: function () { return [this.getDT("start"), this.getDT("end"), this.allDay.getValue()] }, getDT: function (e) { var t = this[e + "Time"].getValue(), n = this[e + "Date"].getValue(); if (!Ext.isDate(n)) return null; n = Ext.Date.format(n, this[e + "Date"].format); if (t && t != "") { t = Ext.Date.format(t, this[e + "Time"].format); var r = Ext.Date.parseDate(n + " " + t, this[e + "Date"].format + " " + this[e + "Time"].format); return r } return Ext.Date.parseDate(n, this[e + "Date"].format) }, setValue: function (e) { if (!e) return; var t = this, n = Extensible.calendar.data.EventMappings, r = n.StartDate.name; Ext.isArray(e) ? (t.setDT(e[0], "start"), t.setDT(e[1], "end"), t.allDay.setValue(!!e[2])) : Ext.isDate(e) ? (t.setDT(e, "start"), t.setDT(e, "end"), t.allDay.setValue(!1)) : e[r] && (t.setDT(e[r], "start"), t.setDT(e[n.EndDate.name], "end") || t.setDT(e[r], "end"), t.allDay.setValue(!!e[n.IsAllDay.name])) }, setDT: function (e, t) { if (e && Ext.isDate(e)) return this[t + "Date"].setValue(e), this[t + "Time"].setValue(Ext.Date.format(e, this[t + "Time"].format)), !0 }, isDirty: function () { var e = !1; return this.rendered && !this.disabled && this.items.each(function (t) { if (t.isDirty()) return e = !0, !1 }), e }, reset: function () { this.delegateFn("reset") }, delegateFn: function (e) { this.items.each(function (t) { t[e] && t[e]() }) }, beforeDestroy: function () { Ext.destroy(this.fieldCt), this.callParent(arguments) }, getRawValue: Ext.emptyFn, setRawValue: Ext.emptyFn }), Ext.define("Extensible.calendar.form.field.ReminderCombo", { extend: "Ext.form.ComboBox", alias: "widget.extensible.remindercombo", requires: ["Ext.data.ArrayStore"], fieldLabel: "Reminder", queryMode: "local", triggerAction: "all", forceSelection: !0, displayField: "desc", valueField: "value", noneText: "None", atStartTimeText: "At start time", reminderValueFormat: "{0} {1} before start", minutesText: "minutes", hourText: "hour", hoursText: "hours", dayText: "day", daysText: "days", weekText: "week", weeksText: "weeks", initComponent: function () { this.store = this.store || Ext.create("Ext.data.ArrayStore", { fields: ["value", "desc"], idIndex: 0, data: this.getValueList() }), this.callParent(arguments) }, getValueList: function () { var e = this, t = e.reminderValueFormat, n = Ext.String.format; return [["", e.noneText], ["0", e.atStartTimeText], ["5", n(t, "5", e.getMinutesText(5))], ["15", n(t, "15", e.getMinutesText(15))], ["30", n(t, "30", e.getMinutesText(30))], ["60", n(t, "1", e.getHoursText(1))], ["90", n(t, "1.5", e.getHoursText(1.5))], ["120", n(t, "2", e.getHoursText(2))], ["180", n(t, "3", e.getHoursText(3))], ["360", n(t, "6", e.getHoursText(6))], ["720", n(t, "12", e.getHoursText(12))], ["1440", n(t, "1", e.getDaysText(1))], ["2880", n(t, "2", e.getDaysText(2))], ["4320", n(t, "3", e.getDaysText(3))], ["5760", n(t, "4", e.getDaysText(4))], ["7200", n(t, "5", e.getDaysText(5))], ["10080", n(t, "1", e.getWeeksText(1))], ["20160", n(t, "2", e.getWeeksText(2))]] }, getMinutesText: function (e) { return e === 1 ? this.minuteText : this.minutesText }, getHoursText: function (e) { return e === 1 ? this.hourText : this.hoursText }, getDaysText: function (e) { return e === 1 ? this.dayText : this.daysText }, getWeeksText: function (e) { return e === 1 ? this.weekText : this.weeksText }, initValue: function () { this.value !== undefined ? this.setValue(this.value) : this.setValue(""), this.originalValue = this.getValue() } }), Ext.define("Extensible.calendar.util.ColorPicker", { extend: "Ext.picker.Color", alias: "widget.extensible.calendarcolorpicker", requires: ["Ext.XTemplate"], colorCount: 32, constructor: function () { this.renderTpl = Ext.create("Ext.XTemplate", '<tpl for="colors"><a href="#" class="x-cal-{.}" hidefocus="on"><em><span unselectable="on">&#160;</span></em></a></tpl>'), this.callParent(arguments) }, initComponent: function () { this.callParent(arguments), this.addCls("x-calendar-palette"), this.handler && this.on("select", this.handler, this.scope || this, { delegate: "a" }), this.colors = []; for (var e = 1; e <= this.colorCount; e++) this.colors.push(e) }, handleClick: function (e, t) { e.preventDefault(); var n = t.className.split("x-cal-")[1]; this.select(n) }, select: function (e, t) { var n = this, r = n.selectedCls, i = n.value; if (!n.rendered) { n.value = e; return } if (e != i || n.allowReselect) { var s = n.el; n.value && s.down(".x-cal-" + i).removeCls(r), s.down(".x-cal-" + e).addCls(r), n.value = e, t !== !0 && n.fireEvent("select", n, e) } } }), Ext.define("Extensible.calendar.gadget.CalendarListMenu", { extend: "Ext.menu.Menu", alias: "widget.extensible.calendarlistmenu", requires: ["Extensible.calendar.util.ColorPicker"], hideOnClick: !0, ignoreParentClicks: !0, displayOnlyThisCalendarText: "Display only this calendar", enableScrolling: !1, initComponent: function () { this.addEvents("showcalendar", "hidecalendar", "radiocalendar", "colorchange"), Ext.apply(this, { items: [{ text: this.displayOnlyThisCalendarText, iconCls: "extensible-cal-icon-cal-show", handler: Ext.bind(this.handleRadioCalendarClick, this) }, "-", { xtype: "extensible.calendarcolorpicker", id: this.id + "-calendar-color-picker", handler: Ext.bind(this.handleColorSelect, this) }] }), this.addClass("x-calendar-list-menu"), this.callParent(arguments) }, afterRender: function () { this.callParent(arguments), this.palette = this.down("#" + this.id + "-calendar-color-picker"), this.colorId && this.palette.select(this.colorId, !0) }, handleRadioCalendarClick: function (e, t) { this.fireEvent("radiocalendar", this, this.calendarId) }, handleColorSelect: function (e, t) { this.fireEvent("colorchange", this, this.calendarId, t, this.colorId), this.colorId = t, this.menuHide() }, setCalendar: function (e, t) { return this.calendarId = e, this.colorId = t, this.rendered && this.palette.select(t, !0), this }, menuHide: function () { this.hideOnClick && this.hide() } }), Ext.define("Extensible.calendar.gadget.CalendarListPanel", { extend: "Ext.panel.Panel", alias: "widget.extensible.calendarlist", requires: ["Ext.XTemplate", "Extensible.calendar.gadget.CalendarListMenu"], title: "Calendars", collapsible: !0, autoHeight: !0, layout: "fit", menuSelector: "em", width: 100, initComponent: function () { this.addCls("x-calendar-list"), this.callParent(arguments) }, afterRender: function (e, t) { this.callParent(arguments), this.store && this.setStore(this.store, !0), this.refresh(), this.body.on("click", this.onClick, this), this.body.on("mouseover", this.onMouseOver, this, { delegate: "li" }), this.body.on("mouseout", this.onMouseOut, this, { delegate: "li" }) }, getListTemplate: function () { return this.tpl || (this.tpl = !Ext.isIE && !Ext.isOpera ? Ext.create("Ext.XTemplate", '<ul class="x-unselectable"><tpl for=".">', '<li id="{cmpId}" class="ext-cal-evr {colorCls} {hiddenCls}">{title}<em>&#160;</em></li>', "</tpl></ul>") : Ext.create("Ext.XTemplate", '<ul class="x-unselectable"><tpl for=".">', '<li id="{cmpId}" class="ext-cal-evo {colorCls} {hiddenCls}">', '<div class="ext-cal-evm">', '<div class="ext-cal-evi">{title}<em>&#160;</em></div>', "</div>", "</li>", "</tpl></ul>"), this.tpl.compile()), this.tpl }, setStore: function (e, t) { !t && this.store && (this.store.un("load", this.refresh, this), this.store.un("add", this.refresh, this), this.store.un("remove", this.refresh, this), this.store.un("update", this.onUpdate, this), this.store.un("clear", this.refresh, this)), e && (e.on("load", this.refresh, this), e.on("add", this.refresh, this), e.on("remove", this.refresh, this), e.on("update", this.onUpdate, this), e.on("clear", this.refresh, this)), this.store = e }, onUpdate: function (e, t, n) { n == Ext.data.Record.COMMIT && this.refresh() }, refresh: function () { if (this.skipRefresh) return; var e = [], t = 0, n = null, r = Extensible.calendar.data.CalendarMappings, i = this.store.getRange(), s = i.length; for (; t < s; t++) n = { cmpId: this.id + "__" + i[t].data[r.CalendarId.name], title: i[t].data[r.Title.name], colorCls: this.getColorCls(i[t].data[r.ColorId.name]) }, i[t].data[r.IsHidden.name] === !0 && (n.hiddenCls = "ext-cal-hidden"), e[e.length] = n; this.getListTemplate().overwrite(this.body, e) }, getColorCls: function (e) { return "x-cal-" + e + "-ad" }, toggleCalendar: function (e, t) { var n = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, e); CM = Extensible.calendar.data.CalendarMappings, isHidden = n.data[CM.IsHidden.name], n.set([CM.IsHidden.name], !isHidden), t !== !1 && n.commit() }, showCalendar: function (e, t) { var n = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, e); n.data[Extensible.calendar.data.CalendarMappings.IsHidden.name] === !0 && this.toggleCalendar(e, t) }, hideCalendar: function (e, t) { var n = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, e); n.data[Extensible.calendar.data.CalendarMappings.IsHidden.name] !== !0 && this.toggleCalendar(e, t) }, radioCalendar: function (e) { var t = 0, n, r = Extensible.calendar.data.CalendarMappings.CalendarId.name, i = this.store.getRange(), s = i.length; for (; t < s; t++) n = i[t].data[r], n == e ? this.showCalendar(n, !1) : this.hideCalendar(n, !1); this.skipRefresh = !0, this.store.sync(), delete this.skipRefresh, this.refresh() }, onMouseOver: function (e, t) { Ext.fly(t).addCls("hover") }, onMouseOut: function (e, t) { Ext.fly(t).removeCls("hover") }, getCalendarId: function (e) { return e.id.split("__")[1] }, getCalendarItemEl: function (e) { return Ext.get(this.id + "__" + e) }, onClick: function (e, t) { var n; (n = e.getTarget(this.menuSelector, 3, !0)) ? this.showEventMenu(n, e.getXY()) : (n = e.getTarget("li", 3, !0)) && this.toggleCalendar(this.getCalendarId(n)) }, handleColorChange: function (e, t, n, r) { var i = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, t); i.data[Extensible.calendar.data.CalendarMappings.ColorId.name] = n, i.commit() }, handleRadioCalendar: function (e, t) { this.radioCalendar(t) }, showEventMenu: function (e, t) { var n = this.getCalendarId(e.parent("li")), r = this.store.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, n); colorId = r.data[Extensible.calendar.data.CalendarMappings.ColorId.name], this.menu || (this.menu = Ext.create("Extensible.calendar.gadget.CalendarListMenu"), this.menu.on("colorchange", this.handleColorChange, this), this.menu.on("radiocalendar", this.handleRadioCalendar, this)), this.menu.setCalendar(n, colorId), this.menu.showAt(t) } }), Ext.define("Extensible.calendar.menu.Event", { extend: "Ext.menu.Menu", alias: "widget.extensible.eventcontextmenu", requires: ["Ext.menu.DatePicker"], hideOnClick: !0, ignoreParentClicks: !0, editDetailsText: "Edit Details", deleteText: "Delete", moveToText: "Move to...", enableScrolling: !1, initComponent: function () { this.addEvents("editdetails", "eventdelete", "eventmove"), this.buildMenu(), this.callParent(arguments) }, buildMenu: function () { if (this.rendered) return; this.dateMenu = Ext.create("Ext.menu.DatePicker", { scope: this, handler: function (e, t) { t = Extensible.Date.copyTime(this.rec.data[Extensible.calendar.data.EventMappings.StartDate.name], t), this.fireEvent("eventmove", this, this.rec, t) } }), Ext.apply(this, { items: [{ text: this.editDetailsText, iconCls: "extensible-cal-icon-evt-edit", scope: this, handler: function () { this.fireEvent("editdetails", this, this.rec, this.ctxEl) } }, { text: this.deleteText, iconCls: "extensible-cal-icon-evt-del", scope: this, handler: function () { this.fireEvent("eventdelete", this, this.rec, this.ctxEl) } }, "-", { text: this.moveToText, iconCls: "extensible-cal-icon-evt-move", menu: this.dateMenu }] }) }, showForEvent: function (e, t, n) { this.rec = e, this.ctxEl = t, this.dateMenu.picker.setValue(e.data[Extensible.calendar.data.EventMappings.StartDate.name]), this.showAt(n) }, onHide: function () { this.callParent(arguments), delete this.ctxEl } }), Ext.define("Extensible.calendar.form.EventDetails", { extend: "Ext.form.Panel", alias: "widget.extensible.eventeditform", requires: ["Extensible.form.field.DateRange", "Extensible.calendar.form.field.ReminderCombo", "Extensible.calendar.data.EventMappings", "Extensible.calendar.form.field.CalendarCombo", "Extensible.form.recurrence.Combo", "Ext.layout.container.Column"], labelWidth: 65, labelWidthRightCol: 65, colWidthLeft: .6, colWidthRight: .4, title: "Event Form", titleTextAdd: "Add Event", titleTextEdit: "Edit Event", titleLabelText: "Title", datesLabelText: "When", reminderLabelText: "Reminder", notesLabelText: "Notes", locationLabelText: "Location", webLinkLabelText: "Web Link", calendarLabelText: "Calendar", repeatsLabelText: "Repeats", saveButtonText: "Save", deleteButtonText: "Delete", cancelButtonText: "Cancel", bodyStyle: "padding:20px 20px 10px;", border: !1, buttonAlign: "center", autoHeight: !0, enableRecurrence: !1, layout: "column", initComponent: function () { this.addEvents({ eventadd: !0, eventupdate: !0, eventdelete: !0, eventcancel: !0 }), this.titleField = Ext.create("Ext.form.TextField", { fieldLabel: this.titleLabelText, name: Extensible.calendar.data.EventMappings.Title.name, anchor: "90%" }), this.dateRangeField = Ext.create("Extensible.form.field.DateRange", { fieldLabel: this.datesLabelText, singleLine: !1, anchor: "90%", listeners: { change: Ext.bind(this.onDateChange, this) } }), this.reminderField = Ext.create("Extensible.calendar.form.field.ReminderCombo", { name: Extensible.calendar.data.EventMappings.Reminder.name, fieldLabel: this.reminderLabelText, anchor: "70%" }), this.notesField = Ext.create("Ext.form.TextArea", { fieldLabel: this.notesLabelText, name: Extensible.calendar.data.EventMappings.Notes.name, grow: !0, growMax: 150, anchor: "100%" }), this.locationField = Ext.create("Ext.form.TextField", { fieldLabel: this.locationLabelText, name: Extensible.calendar.data.EventMappings.Location.name, anchor: "100%" }), this.urlField = Ext.create("Ext.form.TextField", { fieldLabel: this.webLinkLabelText, name: Extensible.calendar.data.EventMappings.Url.name, anchor: "100%" }); var e = [this.titleField, this.dateRangeField, this.reminderField], t = [this.notesField, this.locationField, this.urlField]; this.enableRecurrence && (this.recurrenceField = Ext.create("Extensible.form.recurrence.Fieldset", { name: Extensible.calendar.data.EventMappings.RRule.name, fieldLabel: this.repeatsLabelText, anchor: "90%" }), e.splice(2, 0, this.recurrenceField)), this.calendarStore && (this.calendarField = Ext.create("Extensible.calendar.form.field.CalendarCombo", { store: this.calendarStore, fieldLabel: this.calendarLabelText, name: Extensible.calendar.data.EventMappings.CalendarId.name, anchor: "70%" }), e.splice(2, 0, this.calendarField)), this.items = [{ id: this.id + "-left-col", columnWidth: this.colWidthLeft, layout: "anchor", fieldDefaults: { labelWidth: this.labelWidth }, border: !1, items: e }, { id: this.id + "-right-col", columnWidth: this.colWidthRight, layout: "anchor", fieldDefaults: { labelWidth: this.labelWidthRightCol || this.labelWidth }, border: !1, items: t }], this.fbar = [{ text: this.saveButtonText, scope: this, handler: this.onSave }, { itemId: this.id + "-del-btn", text: this.deleteButtonText, scope: this, handler: this.onDelete }, { text: this.cancelButtonText, scope: this, handler: this.onCancel }], this.addCls("ext-evt-edit-form"), this.callParent(arguments) }, onDateChange: function (e, t) { this.recurrenceField && this.recurrenceField.setStartDate(t[0]) }, loadRecord: function (e) { this.form.reset().loadRecord.apply(this.form, arguments), this.activeRecord = e, this.dateRangeField.setValue(e.data), this.recurrenceField && this.recurrenceField.setStartDate(e.data[Extensible.calendar.data.EventMappings.StartDate.name]), this.calendarStore && this.form.setValues({ calendar: e.data[Extensible.calendar.data.EventMappings.CalendarId.name] }), e.phantom ? (this.setTitle(this.titleTextAdd), this.down("#" + this.id + "-del-btn").hide()) : (this.setTitle(this.titleTextEdit), this.down("#" + this.id + "-del-btn").show()), this.titleField.focus() }, updateRecord: function () { var e = this.dateRangeField.getValue(), t = Extensible.calendar.data.EventMappings, n = this.activeRecord, r = n.fields, i = !1; return n.beginEdit(), r.each(function (e) { var t = this.form.findField(e.name); if (t) { var r = t.getValue(); r.getGroupValue ? r = r.getGroupValue() : t.eachItem && (r = [], t.eachItem(function (e) { r.push(e.getValue()) })), n.set(e.name, r) } }, this), n.set(t.StartDate.name, e[0]), n.set(t.EndDate.name, e[1]), n.set(t.IsAllDay.name, e[2]), i = n.dirty, n.endEdit(), i }, onCancel: function () { this.cleanup(!0), this.fireEvent("eventcancel", this, this.activeRecord) }, cleanup: function (e) { this.activeRecord && this.activeRecord.reject(), delete this.activeRecord, this.form.isDirty() && this.form.reset() }, onSave: function () { if (!this.form.isValid()) return; if (!this.updateRecord()) { this.onCancel(); return } this.fireEvent(this.activeRecord.phantom ? "eventadd" : "eventupdate", this, this.activeRecord) }, onDelete: function () { this.fireEvent("eventdelete", this, this.activeRecord) } }), Ext.define("Extensible.calendar.form.EventWindow", {
     extend: "Ext.window.Window", alias: "widget.extensible.eventeditwindow", requires: ["Ext.form.Panel", "Extensible.calendar.data.EventModel", "Extensible.calendar.data.EventMappings"], titleTextAdd: "Add Event", titleTextEdit: "Edit Event", width: 600, labelWidth: 65, detailsLinkText: "Edit Details...", savingMessage: "Saving changes...", deletingMessage: "Deleting event...", saveButtonText: "Save", deleteButtonText: "Delete", cancelButtonText: "Cancel", titleLabelText: "Title", datesLabelText: "When", calendarLabelText: "Calendar", closeAction: "hide", modal: !1, resizable: !1, constrain: !0, buttonAlign: "left", editDetailsLinkClass: "edit-dtl-link", enableEditDetails: !0, layout: "fit", formPanelConfig: { border: !1 }, initComponent: function () { this.addEvents({ eventadd: !0, eventupdate: !0, eventdelete: !0, eventcancel: !0, editdetails: !0 }), this.fbar = this.getFooterBarConfig(), this.callParent(arguments) }, getFooterBarConfig: function () { var e = ["->", { text: this.saveButtonText, itemId: this.id + "-save-btn", disabled: !1, handler: this.onSave, scope: this }, { text: this.deleteButtonText, itemId: this.id + "-delete-btn", disabled: !1, handler: this.onDelete, scope: this, hideMode: "offsets" }, { text: this.cancelButtonText, itemId: this.id + "-cancel-btn", disabled: !1, handler: this.onCancel, scope: this }]; return this.enableEditDetails !== !1 && e.unshift({ xtype: "tbtext", itemId: this.id + "-details-btn", text: '<a href="#" class="' + this.editDetailsLinkClass + '">' + this.detailsLinkText + "</a>" }), e }, onRender: function (e, t) { this.formPanel = Ext.create("Ext.FormPanel", Ext.applyIf({ fieldDefaults: { labelWidth: this.labelWidth }, items: this.getFormItemConfigs() }, this.formPanelConfig)), this.add(this.formPanel), this.callParent(arguments) }, getFormItemConfigs: function () {
         var e = [{
             xtype: "textfield", itemId: this.id + "-title", name: Extensible
             .calendar.data.EventMappings.Title.name, fieldLabel: this.titleLabelText, anchor: "100%"
         }, { xtype: "extensible.daterangefield", itemId: this.id + "-dates", name: "dates", anchor: "95%", singleLine: !0, fieldLabel: this.datesLabelText }]; return this.calendarStore && e.push({ xtype: "extensible.calendarcombo", itemId: this.id + "-calendar", name: Extensible.calendar.data.EventMappings.CalendarId.name, anchor: "100%", fieldLabel: this.calendarLabelText, store: this.calendarStore }), e
     }, afterRender: function () { this.callParent(arguments), this.el.addCls("ext-cal-event-win"), this.initRefs(); var e = this.getDockedItems("toolbar")[0].items.items[0]; e.el.hasCls("x-component-default") && Ext.destroy(e) }, initRefs: function () { this.saveButton = this.down("#" + this.id + "-save-btn"), this.deleteButton = this.down("#" + this.id + "-delete-btn"), this.cancelButton = this.down("#" + this.id + "-cancel-btn"), this.detailsButton = this.down("#" + this.id + "-details-btn"), this.detailsButton && this.detailsButton.getEl().on("click", this.onEditDetailsClick, this), this.titleField = this.down("#" + this.id + "-title"), this.dateRangeField = this.down("#" + this.id + "-dates"), this.calendarField = this.down("#" + this.id + "-calendar") }, onEditDetailsClick: function (e) { e.stopEvent(), this.updateRecord(this.activeRecord, !0), this.fireEvent("editdetails", this, this.activeRecord, this.animateTarget) }, show: function (e, t) { this.animateTarget = Ext.isIE8 && Ext.isStrict ? null : t, M = Extensible.calendar.data.EventMappings, this.callParent([this.animateTarget, function () { this.titleField.focus(!1, 100) }, this]), this.deleteButton[e.data && e.data[M.EventId.name] ? "show" : "hide"](); var n, r = this.formPanel.form; if (e.data) n = e, n.phantom ? this.setTitle(this.titleTextAdd) : this.setTitle(this.titleTextEdit), r.loadRecord(n); else { this.setTitle(this.titleTextAdd); var i = e[M.StartDate.name], s = e[M.EndDate.name] || Extensible.Date.add(i, { hours: 1 }); n = Ext.create("Extensible.calendar.data.EventModel"), n.data[M.StartDate.name] = i, n.data[M.EndDate.name] = s, n.data[M.IsAllDay.name] = !!e[M.IsAllDay.name] || i.getDate() != Extensible.Date.add(s, { millis: 1 }).getDate(), r.reset(), r.loadRecord(n) } return this.calendarStore && this.calendarField.setValue(n.data[M.CalendarId.name]), this.dateRangeField.setValue(n.data), this.activeRecord = n, this }, roundTime: function (e, t) { t = t || 15; var n = parseInt(e.getMinutes()); return e.add("mi", t - n % t) }, onCancel: function () { this.cleanup(!0), this.fireEvent("eventcancel", this, this.activeRecord, this.animateTarget) }, cleanup: function (e) { this.activeRecord && this.activeRecord.reject(), delete this.activeRecord, e === !0 && this.hide() }, updateRecord: function (e, t) { var n = e.fields, r = this.formPanel.getForm().getValues(), i, s = Extensible.calendar.data.EventMappings, o = {}; n.each(function (e) { i = e.name, i in r && (o[i] = r[i]) }); var u = this.dateRangeField.getValue(); return o[s.StartDate.name] = u[0], o[s.EndDate.name] = u[1], o[s.IsAllDay.name] = u[2], e.beginEdit(), e.set(o), t || e.endEdit(), this }, onSave: function () { if (!this.formPanel.form.isValid()) return; if (!this.updateRecord(this.activeRecord)) { this.onCancel(); return } this.fireEvent(this.activeRecord.phantom ? "eventadd" : "eventupdate", this, this.activeRecord, this.animateTarget) }, onDelete: function () { this.fireEvent("eventdelete", this, this.activeRecord, this.animateTarget) }
 }), Ext.define("Extensible.calendar.view.AbstractCalendar", { extend: "Ext.Component", requires: ["Ext.CompositeElement"], requires: ["Extensible.calendar.form.EventDetails", "Extensible.calendar.form.EventWindow", "Extensible.calendar.menu.Event", "Extensible.calendar.dd.DragZone", "Extensible.calendar.dd.DropZone"], startDay: 0, spansHavePriority: !1, trackMouseOver: !0, enableFx: !0, enableAddFx: !0, enableUpdateFx: !1, enableRemoveFx: !0, enableDD: !0, enableContextMenus: !0, suppressBrowserContextMenu: !1, monitorResize: !0, todayText: "Today", ddCreateEventText: "Create event for {0}", ddMoveEventText: "Move event to {0}", ddResizeEventText: "Update event to {0}", defaultEventTitleText: "(No title)", dateParamStart: "startDate", dateParamEnd: "endDate", dateParamFormat: "Y-m-d", editModal: !1, enableEditDetails: !0, weekendCls: "ext-cal-day-we", prevMonthCls: "ext-cal-day-prev", nextMonthCls: "ext-cal-day-next", todayCls: "ext-cal-day-today", hideMode: "offsets", weekCount: 1, dayCount: 1, eventSelector: ".ext-cal-evt", eventOverClass: "ext-evt-over", eventElIdDelimiter: "-evt-", dayElIdDelimiter: "-day-", getEventBodyMarkup: Ext.emptyFn, getEventTemplate: Ext.emptyFn, initComponent: function () { this.setStartDate(this.startDate || new Date), this.callParent(arguments), this.readOnly === !0 && this.addCls("ext-cal-readonly"), this.addEvents({ eventsrendered: !0, eventclick: !0, eventover: !0, eventout: !0, beforedatechange: !0, datechange: !0, rangeselect: !0, beforeeventmove: !0, eventmove: !0, initdrag: !0, dayover: !0, dayout: !0, editdetails: !0, eventadd: !0, eventupdate: !0, eventcancel: !0, beforeeventdelete: !0, eventdelete: !0 }) }, afterRender: function () { this.callParent(arguments), this.renderTemplate(), this.store && (this.setStore(this.store, !0), this.store.deferLoad ? (this.reloadStore(this.store.deferLoad), delete this.store.deferLoad) : this.store.initialParams = this.getStoreParams()), this.calendarStore && this.setCalendarStore(this.calendarStore, !0), this.on("resize", this.onResize, this), this.el.on({ mouseover: this.onMouseOver, mouseout: this.onMouseOut, click: this.onClick, scope: this }), this.enableContextMenus && this.readOnly !== !0 && this.el.on("contextmenu", this.onContextMenu, this), this.el.unselectable(), this.enableDD && this.readOnly !== !0 && this.initDD && this.initDD(), this.on("eventsrendered", this.onEventsRendered), Ext.defer(this.forceSize, 100, this) }, getStoreDateParams: function () { var e = {}; return e[this.dateParamStart] = Ext.Date.format(this.viewStart, this.dateParamFormat), e[this.dateParamEnd] = Ext.Date.format(this.viewEnd, this.dateParamFormat), e }, getStoreParams: function () { var e = this.getStoreDateParams(); return e }, reloadStore: function (e) { Extensible.log("reloadStore"), e = Ext.isObject(e) ? e : {}, e.params = e.params || {}, Ext.apply(e.params, this.getStoreParams()), this.store.load(e) }, onEventsRendered: function () { this.forceSize() }, forceSize: function () { if (this.el && this.el.down) { var e = this.el.down(".ext-cal-hd-ct"), t = this.el.down(".ext-cal-body-ct"); if (t == null || e == null) return; var n = e.getHeight(), r = this.el.parent().getSize(); t.setHeight(r.height - n) } }, refresh: function (e) { Extensible.log("refresh (base), reload = " + e), e === !0 && this.reloadStore(), this.prepareData(), this.renderTemplate(), this.renderItems() }, getWeekCount: function () { var e = Extensible.Date.diffDays(this.viewStart, this.viewEnd); return Math.ceil(e / this.dayCount) }, prepareData: function () { var e = Ext.Date.getLastDateOfMonth(this.startDate), t = 0, n = 0, r = Ext.Date.clone(this.viewStart), i = this.weekCount < 1 ? 6 : this.weekCount; this.eventGrid = [[]], this.allDayGrid = [[]], this.evtMaxCount = []; var s = this.store.queryBy(function (e) { return this.isEventVisible(e.data) }, this); for (; t < i; t++) { this.evtMaxCount[t] = 0; if (this.weekCount == -1 && r > e) break; this.eventGrid[t] = this.eventGrid[t] || [], this.allDayGrid[t] = this.allDayGrid[t] || []; for (d = 0; d < this.dayCount; d++) { if (s.getCount() > 0) { var o = s.filterBy(function (e) { var n = Ext.Date.clearTime(e.data[Extensible.calendar.data.EventMappings.StartDate.name], !0), i = r.getTime() == n.getTime(), s = t == 0 && d == 0 && r > e.data[Extensible.calendar.data.EventMappings.StartDate.name]; return i || s }, this); this.sortEventRecordsForDay(o), this.prepareEventGrid(o, t, d) } r = Extensible.Date.add(r, { days: 1 }) } } this.currentWeekCount = t }, prepareEventGrid: function (e, t, n) { var r = this, i = 0, s = Ext.Date.clone(r.viewStart), o = r.maxEventsPerDay || 999, u; e.each(function (e) { var s = Extensible.calendar.data.EventMappings; if (Extensible.Date.diffDays(e.data[s.StartDate.name], e.data[s.EndDate.name]) > 0) { var a = Extensible.Date.diffDays(Extensible.Date.max(r.viewStart, e.data[s.StartDate.name]), Extensible.Date.min(r.viewEnd, e.data[s.EndDate.name])) + 1; r.prepareEventGridSpans(e, r.eventGrid, t, n, a), r.prepareEventGridSpans(e, r.allDayGrid, t, n, a, !0) } else i = r.findEmptyRowIndex(t, n), r.eventGrid[t][n] = r.eventGrid[t][n] || [], r.eventGrid[t][n][i] = e, e.data[s.IsAllDay.name] && (i = r.findEmptyRowIndex(t, n, !0), r.allDayGrid[t][n] = r.allDayGrid[t][n] || [], r.allDayGrid[t][n][i] = e); return u = r[r.isHeaderView ? "allDayGrid" : "eventGrid"][t][n] || [], u.length && r.evtMaxCount[t] < u.length && (r.evtMaxCount[t] = Math.min(o + 1, u.length)), !0 }, r) }, prepareEventGridSpans: function (e, t, n, r, i, s) { var o = n, u = r, a = this.findEmptyRowIndex(n, r, s), f = Ext.Date.clone(this.viewStart), l = { event: e, isSpan: !0, isSpanStart: !0, spanLeft: !1, spanRight: r == 6 }; t[n][r] = t[n][r] || [], t[n][r][a] = l; while (--i) { f = Extensible.Date.add(f, { days: 1 }); if (f > this.viewEnd) break; ++u > 6 && (u = 0, o++, a = this.findEmptyRowIndex(o, 0)), t[o] = t[o] || [], t[o][u] = t[o][u] || [], t[o][u][a] = { event: e, isSpan: !0, isSpanStart: u == 0, spanLeft: o > n && u % 7 == 0, spanRight: u == 6 && i > 1 } } }, findEmptyRowIndex: function (e, t, n) { var r = n ? this.allDayGrid : this.eventGrid, i = r[e] ? r[e][t] || [] : [], s = 0, o = i.length; for (; s < o; s++) if (i[s] == null) return s; return o }, renderTemplate: function () { this.tpl && (this.tpl.overwrite(this.el, this.getTemplateParams()), this.lastRenderStart = Ext.Date.clone(this.viewStart), this.lastRenderEnd = Ext.Date.clone(this.viewEnd)) }, getTemplateParams: function () { return { viewStart: this.viewStart, viewEnd: this.viewEnd, startDate: this.startDate, dayCount: this.dayCount, weekCount: this.weekCount, weekendCls: this.weekendCls, prevMonthCls: this.prevMonthCls, nextMonthCls: this.nextMonthCls, todayCls: this.todayCls } }, disableStoreEvents: function () { return this.monitorStoreEvents = !1, this }, enableStoreEvents: function (e) { return this.monitorStoreEvents = !0, e === !0 && this.refresh(), this }, onResize: function () { this.refresh(!1) }, onInitDrag: function () { this.fireEvent("initdrag", this) }, onEventDrop: function (e, t) { this.moveEvent(e, t) }, onCalendarEndDrag: function (e, t, n) { this.dragPending = !0; var r = {}, n = Ext.bind(this.onCalendarEndDragComplete, this, [n]); r[Extensible.calendar.data.EventMappings.StartDate.name] = e, r[Extensible.calendar.data.EventMappings.EndDate.name] = t, this.fireEvent("rangeselect", this, r, n) !== !1 ? (this.showEventEditor(r, null), this.editWin ? this.editWin.on("hide", n, this, { single: !0 }) : n()) : this.onCalendarEndDragComplete(n) }, onCalendarEndDragComplete: function (e) { e(), this.dragPending = !1 }, onUpdate: function (e, t, n) { if (this.hidden === !0 || this.monitorStoreEvents === !1) return; if (n == Ext.data.Record.COMMIT) { Extensible.log("onUpdate"), this.dismissEventEditor(); var r = t.data[Extensible.calendar.data.EventMappings.RRule.name]; this.refresh(r !== undefined && r !== ""), this.enableFx && this.enableUpdateFx && this.doUpdateFx(this.getEventEls(t.data[Extensible.calendar.data.EventMappings.EventId.name]), { scope: this }) } }, doUpdateFx: function (e, t) { this.highlightEvent(e, null, t) }, onAdd: function (e, t, n) { var r = Ext.isArray(t) ? t[0] : t; if (this.hidden === !0 || this.monitorStoreEvents === !1) return; if (r._deleting) { delete r._deleting; return } Extensible.log("onAdd"); var i = r.data[Extensible.calendar.data.EventMappings.RRule.name]; this.dismissEventEditor(), this.tempEventId = r.id, this.refresh(i !== undefined && i !== ""), this.enableFx && this.enableAddFx && this.doAddFx(this.getEventEls(r.data[Extensible.calendar.data.EventMappings.EventId.name]), { scope: this }) }, doAddFx: function (e, t) { e.fadeIn(Ext.apply(t, { duration: 2e3 })) }, onRemove: function (e, t) { if (this.hidden === !0 || this.monitorStoreEvents === !1) return; Extensible.log("onRemove"), this.dismissEventEditor(); var n = t.data[Extensible.calendar.data.EventMappings.RRule.name], r = n !== undefined && n !== ""; this.enableFx && this.enableRemoveFx ? this.doRemoveFx(this.getEventEls(t.data[Extensible.calendar.data.EventMappings.EventId.name]), { remove: !0, scope: this, callback: Ext.bind(this.refresh, this, [r]) }) : (this.getEventEls(t.data[Extensible.calendar.data.EventMappings.EventId.name]).remove(), this.refresh(r)) }, doRemoveFx: function (e, t) { e.getCount() == 0 && Ext.isFunction(t.callback) ? t.callback.call(t.scope || this) : e.fadeOut(t) }, highlightEvent: function (e, t, n) { if (this.enableFx) { var r; !Ext.isIE && !Ext.isOpera ? e.highlight(t, n) : e.each(function (e) { e.highlight(t, Ext.applyIf({ attr: "color" }, n)), (r = e.down(".ext-cal-evm")) && r.highlight(t, n) }, this) } }, getEventIdFromEl: function (e) { e = Ext.get(e); var t, n = "", r, i = e.dom.className.split(" "); return Ext.each(i, function (e) { t = e.split(this.eventElIdDelimiter); if (t.length > 1) return n = t[1], !1 }, this), n }, getEventId: function (e) { return e === undefined && this.tempEventId && (e = this.tempEventId), e }, getEventSelectorCls: function (e, t) { var n = t ? "." : ""; return n + this.id + this.eventElIdDelimiter + this.getEventId(e) }, getEventEls: function (e) { var t = this.el.select(this.getEventSelectorCls(this.getEventId(e), !0), !1); return Ext.create("Ext.CompositeElement", t) }, isToday: function () { var e = Ext.Date.clearTime(new Date).getTime(); return this.viewStart.getTime() <= e && this.viewEnd.getTime() >= e }, onDataChanged: function (e) { Extensible.log("onDataChanged"), this.refresh(!1) }, isEventVisible: function (e) { var t = Extensible.calendar.data.EventMappings, n = e.data || e, r = this.calendarStore ? this.calendarStore.findRecord(t.CalendarId.name, e[t.CalendarId.name]) : null; if (r && r.data[Extensible.calendar.data.CalendarMappings.IsHidden.name] === !0) return !1; var i = this.viewStart.getTime(), s = this.viewEnd.getTime(), o = n[t.StartDate.name].getTime(), u = n[t.EndDate.name].getTime(); return Extensible.Date.rangesOverlap(i, s, o, u) }, isOverlapping: function (e, t) { var n = e.data ? e.data : e, r = t.data ? t.data : t, i = Extensible.calendar.data.EventMappings, s = n[i.StartDate.name].getTime(), o = Extensible.Date.add(n[i.EndDate.name], { seconds: -1 }).getTime(), u = r[i.StartDate.name].getTime(), a = Extensible.Date.add(r[i.EndDate.name], { seconds: -1 }).getTime(), f = Extensible.Date.diff(n[i.StartDate.name], r[i.StartDate.name], "m"); o < s && (o = s), a < u && (a = u); var l = Extensible.Date.rangesOverlap(s, o, u, a), c = this.minEventDisplayMinutes || 0, h = c > 0 && f > -c && f < c; return l || h }, isEventSpanning: function (e) { var t = Extensible.calendar.data.EventMappings, n = e.data || e, r; return r = Extensible.Date.diffDays(n[t.StartDate.name], n[t.EndDate.name]), r > 0 }, getDayEl: function (e) { return Ext.get(this.getDayId(e)) }, getDayId: function (e) { return Ext.isDate(e) && (e = Ext.Date.format(e, "Ymd")), this.id + this.dayElIdDelimiter + e }, getStartDate: function () { return this.startDate }, setStartDate: function (e, t) { var n = this; Extensible.log("setStartDate (base) " + Ext.Date.format(e, "Y-m-d")); var r = Ext.Date.clone, i = n.startDate ? r(n.startDate) : null, s = r(e), o = n.viewStart ? r(n.viewStart) : null, u = n.viewEnd ? r(n.viewEnd) : null; n.fireEvent("beforedatechange", n, i, s, o, u) !== !1 && (n.startDate = Ext.Date.clearTime(e), n.setViewBounds(e), n.ownerCalendarPanel && n.ownerCalendarPanel.startDate !== n.startDate && (n.ownerCalendarPanel.startDate = n.startDate), n.rendered && n.refresh(t), n.fireEvent("datechange", n, r(n.startDate), r(n.viewStart), r(n.viewEnd))) }, setViewBounds: function (e) { var t = this, n = e || t.startDate, r = n.getDay() - t.startDay, i = Extensible.Date; r < 0 && (r += 7); switch (this.weekCount) { case 0: case 1: t.viewStart = t.dayCount < 7 && !t.startDayIsStatic ? n : i.add(n, { days: -r, clearTime: !0 }), t.viewEnd = i.add(t.viewStart, { days: t.dayCount || 7, seconds: -1 }); return; case -1: n = Ext.Date.getFirstDateOfMonth(n), r = n.getDay() - t.startDay, r < 0 && (r += 7), t.viewStart = i.add(n, { days: -r, clearTime: !0 }); var s = i.add(n, { months: 1, seconds: -1 }); r = t.startDay, r > s.getDay() && (r -= 7), t.viewEnd = i.add(s, { days: 6 - s.getDay() + r }); return; default: t.viewStart = i.add(n, { days: -r, clearTime: !0 }), t.viewEnd = i.add(t.viewStart, { days: t.weekCount * 7, seconds: -1 }) } }, getViewBounds: function () { return { start: this.viewStart, end: this.viewEnd } }, sortEventRecordsForDay: function (e) { if (e.length < 2) return; e.sortBy(Ext.bind(function (e, t) { var n = e.data, r = t.data, i = Extensible.calendar.data.EventMappings; if (n[i.IsAllDay.name]) return -1; if (r[i.IsAllDay.name]) return 1; if (this.spansHavePriority) { var s = Extensible.Date.diffDays; if (s(n[i.StartDate.name], n[i.EndDate.name]) > 0) return s(r[i.StartDate.name], r[i.EndDate.name]) > 0 ? n[i.StartDate.name].getTime() == r[i.StartDate.name].getTime() ? r[i.EndDate.name].getTime() - n[i.EndDate.name].getTime() : n[i.StartDate.name].getTime() - r[i.StartDate.name].getTime() : -1; return s(r[i.StartDate.name], r[i.EndDate.name]) > 0 ? 1 : n[i.StartDate.name].getTime() - r[i.StartDate.name].getTime() } return n[i.StartDate.name].getTime() - r[i.StartDate.name].getTime() }, this)) }, moveTo: function (e, t) { return Ext.isDate(e) ? (this.setStartDate(e, t), this.startDate) : e }, moveNext: function (e) { return this.moveTo(Extensible.Date.add(this.viewEnd, { days: 1 }), e) }, movePrev: function (e) { var t = Extensible.Date.diffDays(this.viewStart, this.viewEnd) + 1; return this.moveDays(-t, e) }, moveMonths: function (e, t) { return this.moveTo(Extensible.Date.add(this.startDate, { months: e }), t) }, moveWeeks: function (e, t) { return this.moveTo(Extensible.Date.add(this.startDate, { days: e * 7 }), t) }, moveDays: function (e, t) { return this.moveTo(Extensible.Date.add(this.startDate, { days: e }), t) }, moveToday: function (e) { return this.moveTo(new Date, e) }, setStore: function (e, t) { var n = this.store; !t && n && (n.un("datachanged", this.onDataChanged, this), n.un("clear", this.refresh, this), n.un("write", this.onWrite, this), n.un("exception", this.onException, this)), e && (e.on("datachanged", this.onDataChanged, this), e.on("clear", this.refresh, this), e.on("write", this.onWrite, this), e.on("exception", this.onException, this)), this.store = e }, onException: function (e, t, n, r, i, s) { s.reject && s.reject() }, setCalendarStore: function (e, t) { !t && this.calendarStore && (this.calendarStore.un("datachanged", this.refresh, this), this.calendarStore.un("add", this.refresh, this), this.calendarStore.un("remove", this.refresh, this), this.calendarStore.un("update", this.refresh, this)), e && (e.on("datachanged", this.refresh, this), e.on("add", this.refresh, this), e.on("remove", this.refresh, this), e.on("update", this.refresh, this)), this.calendarStore = e }, getEventRecord: function (e) { var t = this.store.find(Extensible.calendar.data.EventMappings.EventId.name, e, 0, !1, !0, !0); return this.store.getAt(t) }, getEventRecordFromEl: function (e) { return this.getEventRecord(this.getEventIdFromEl(e)) }, getEventEditor: function () { return this.editWin = this.editWin || Ext.WindowMgr.get("ext-cal-editwin"), this.editWin || (this.editWin = Ext.create("Extensible.calendar.form.EventWindow", { id: "ext-cal-editwin", calendarStore: this.calendarStore, modal: this.editModal, enableEditDetails: this.enableEditDetails, listeners: { eventadd: { fn: function (e, t, n) { e.currentView.onEventAdd(null, t) }, scope: this }, eventupdate: { fn: function (e, t, n) { e.currentView.onEventUpdate(null, t) }, scope: this }, eventdelete: { fn: function (e, t, n) { e.currentView.onEventDelete(null, t) }, scope: this }, editdetails: { fn: function (e, t, n, r) { e.animateTarget = null, e.hide(), e.currentView.fireEvent("editdetails", e.currentView, t) }, scope: this }, eventcancel: { fn: function (e, t, n) { this.dismissEventEditor(null, n), e.currentView.onEventCancel() }, scope: this } } })), this.editWin.currentView = this, this.editWin }, showEventEditor: function (e, t) { return this.getEventEditor().show(e, t, this), this }, dismissEventEditor: function (e, t) { this.newRecord && this.newRecord.phantom && this.store.remove(this.newRecord), delete this.newRecord; var n = Ext.WindowMgr.get("ext-cal-editwin"); return n && n[e ? e : "hide"](t), this }, save: function () { this.store.autoSync || this.store.sync() }, onWrite: function (e, t) { if (t.wasSuccessful()) { var n = t.records[0]; switch (t.action) { case "create": this.onAdd(e, n); break; case "update": this.onUpdate(e, n, Ext.data.Record.COMMIT); break; case "destroy": this.onRemove(e, n) } } }, onEventAdd: function (e, t) { this.newRecord = t, t.store || (this.store.add(t), this.save()), this.fireEvent("eventadd", this, t) }, onEventUpdate: function (e, t) { this.save(), this.fireEvent("eventupdate", this, t) }, onEventDelete: function (e, t) { t.store && this.store.remove(t), this.save(), this.fireEvent("eventdelete", this, t) }, onEventCancel: function (e, t) { this.fireEvent("eventcancel", this, t) }, onDayClick: function (e, t, n) { if (this.readOnly === !0) return; if (this.fireEvent("dayclick", this, Ext.Date.clone(e), t, n) !== !1) { var r = Extensible.calendar.data.EventMappings, i = {}; i[r.StartDate.name] = e, i[r.IsAllDay.name] = t, this.showEventEditor(i, n) } }, showEventMenu: function (e, t) { this.eventMenu || (this.eventMenu = Ext.create("Extensible.calendar.menu.Event", { listeners: { editdetails: Ext.bind(this.onEditDetails, this), eventdelete: Ext.bind(this.onDeleteEvent, this), eventmove: Ext.bind(this.onMoveEvent, this) } })), this.eventMenu.showForEvent(this.getEventRecordFromEl(e), e, t), this.menuActive = !0 }, onEditDetails: function (e, t, n) { this.fireEvent("editdetails", this, t, n), this.menuActive = !1 }, onMoveEvent: function (e, t, n) { this.moveEvent(t, n), this.menuActive = !1 }, moveEvent: function (e, t) { if (Extensible.Date.compare(e.data[Extensible.calendar.data.EventMappings.StartDate.name], t) === 0) return; if (this.fireEvent("beforeeventmove", this, e, Ext.Date.clone(t)) !== !1) { var n = t.getTime() - e.data[Extensible.calendar.data.EventMappings.StartDate.name].getTime(); e.beginEdit(), e.set(Extensible.calendar.data.EventMappings.StartDate.name, t), e.set(Extensible.calendar.data.EventMappings.EndDate.name, Extensible.Date.add(e.data[Extensible.calendar.data.EventMappings.EndDate.name], { millis: n })), e.endEdit(), this.save(), this.fireEvent("eventmove", this, e) } }, onDeleteEvent: function (e, t, n) { t._deleting = !0, this.deleteEvent(t, n), this.menuActive = !1 }, deleteEvent: function (e, t) { this.fireEvent("beforeeventdelete", this, e, t) !== !1 && (this.store.remove(e), this.save(), this.fireEvent("eventdelete", this, e, t)) }, onContextMenu: function (e, t) { var n, r = !1; if (n = e.getTarget(this.eventSelector, 5, !0)) this.dismissEventEditor().showEventMenu(n, e.getXY()), r = !0; (r || this.suppressBrowserContextMenu === !0) && e.preventDefault() }, onClick: function (e, t) { var n = this, r = e.getTarget(n.eventSelector, 5); n.dropZone && n.dropZone.clearShims(); if (n.menuActive === !0) return n.menuActive = !1, !0; if (r) { var i = n.getEventIdFromEl(r), s = n.getEventRecord(i); return n.fireEvent("eventclick", n, s, r) !== !1 && n.readOnly !== !0 && n.showEventEditor(s, r), !0 } }, onMouseOver: function (e, t) { this.trackMouseOver !== !1 && (this.dragZone == undefined || !this.dragZone.dragging) && (this.handleEventMouseEvent(e, t, "over") || this.handleDayMouseEvent(e, t, "over")) }, onMouseOut: function (e, t) { this.trackMouseOver !== !1 && (this.dragZone == undefined || !this.dragZone.dragging) && (this.handleEventMouseEvent(e, t, "out") || this.handleDayMouseEvent(e, t, "out")) }, handleEventMouseEvent: function (e, t, n) { var r; if (r = e.getTarget(this.eventSelector, 5, !0)) { var i = Ext.get(e.getRelatedTarget()); if (r == i || r.contains(i)) return !0; var s = this.getEventIdFromEl(r); if (this.eventOverClass != "") { var o = this.getEventEls(s); o[n == "over" ? "addCls" : "removeCls"](this.eventOverClass) } return this.fireEvent("event" + n, this, this.getEventRecord(s), r), !0 } return !1 }, getDateFromId: function (e, t) { var n = e.split(t); return n[n.length - 1] }, handleDayMouseEvent: function (e, t, n) { if (t = e.getTarget("td", 3)) if (t.id && t.id.indexOf(this.dayElIdDelimiter) > -1) { var r = this.getDateFromId(t.id, this.dayElIdDelimiter), i = Ext.get(e.getRelatedTarget()), s, o; i && (s = i.is("td") ? i : i.up("td", 3), o = s && s.id ? this.getDateFromId(s.id, this.dayElIdDelimiter) : ""); if (!i || r != o) { var u = this.getDayEl(r); u && this.dayOverClass != "" && u[n == "over" ? "addCls" : "removeCls"](this.dayOverClass), this.fireEvent("day" + n, this, Ext.Date.parseDate(r, "Ymd"), u) } } }, renderItems: function () { throw "This method must be implemented by a subclass" }, destroy: function () { this.callParent(arguments), this.el && this.el.un("contextmenu", this.onContextMenu, this), Ext.destroy(this.editWin, this.eventMenu, this.dragZone, this.dropZone) } }), Ext.define("Extensible.calendar.view.MonthDayDetail", { extend: "Ext.Component", alias: "widget.extensible.monthdaydetailview", requires: ["Ext.XTemplate", "Extensible.calendar.view.AbstractCalendar"], initComponent: function () { this.callParent(arguments), this.addEvents({ eventsrendered: !0 }) }, afterRender: function () { this.tpl = this.getTemplate(), this.callParent(arguments), this.el.on({ click: this.view.onClick, mouseover: this.view.onMouseOver, mouseout: this.view.onMouseOut, scope: this.view }) }, getTemplate: function () { return this.tpl || (this.tpl = Ext.create("Ext.XTemplate", '<div class="ext-cal-mdv x-unselectable">', '<table class="ext-cal-mvd-tbl" cellpadding="0" cellspacing="0">', "<tbody>", '<tpl for=".">', '<tr><td class="ext-cal-ev">{markup}</td></tr>', "</tpl>", "</tbody>", "</table>", "</div>")), this.tpl.compile(), this.tpl }, update: function (e) { this.date = e, this.refresh() }, refresh: function () { if (!this.rendered) return; var e = this.view.getEventTemplate(), t = []; evts = this.store.queryBy(function (e) { var t = Ext.Date.clearTime(this.date, !0).getTime(), n = Extensible.calendar.data.EventMappings, r = Ext.Date.clearTime(e.data[n.StartDate.name], !0).getTime(), i = t == r, s = !1, o = e.data[n.CalendarId.name], u = this.calendarStore ? this.calendarStore.getById(o) : null; if (u && u.data[Extensible.calendar.data.CalendarMappings.IsHidden.name] === !0) return !1; if (!i) { var a = Ext.Date.clearTime(e.data[n.EndDate.name], !0).getTime(); s = r < t && a >= t } return i || s }, this), Extensible.calendar.view.AbstractCalendar.prototype.sortEventRecordsForDay.call(this, evts), evts.each(function (n) { var r = n.data, i = Extensible.calendar.data.EventMappings; r._renderAsAllDay = r[i.IsAllDay.name] || Extensible.Date.diffDays(r[i.StartDate.name], r[i.EndDate.name]) > 0, r.spanLeft = Extensible.Date.diffDays(r[i.StartDate.name], this.date) > 0, r.spanRight = Extensible.Date.diffDays(this.date, r[i.EndDate.name]) > 0, r.spanCls = r.spanLeft ? r.spanRight ? "ext-cal-ev-spanboth" : "ext-cal-ev-spanleft" : r.spanRight ? "ext-cal-ev-spanright" : "", t.push({ markup: e.apply(this.getTemplateEventData(r)) }) }, this), this.tpl.overwrite(this.el, t), this.fireEvent("eventsrendered", this, this.date, evts.getCount()) }, getTemplateEventData: function (e) { var t = this.view.getTemplateEventData(e); return t._elId = "dtl-" + t._elId, t } }), Ext.define("Extensible.calendar.view.Month", {
     extend: "Extensible.calendar.view.AbstractCalendar", alias: "widget.extensible.monthview", requires: ["Ext.XTemplate", "Extensible.calendar.template.Month", "Extensible.calendar.util.WeekEventRenderer", "Extensible.calendar.view.MonthDayDetail"], moreText: "+{0} more...", detailsTitleDateFormat: "F j", showTime: !0, showTodayText: !0, showHeader: !1, showWeekLinks: !1, showWeekNumbers: !1, weekLinkOverClass: "ext-week-link-over", daySelector: ".ext-cal-day", moreSelector: ".ext-cal-ev-more", weekLinkSelector: ".ext-cal-week-link", weekCount: -1, dayCount: 7, moreElIdDelimiter: "-more-", weekLinkIdDelimiter: "ext-cal-week-", initComponent: function () { this.callParent(arguments), this.addEvents({ dayclick: !0, weekclick: !0, dayover: !0, dayout: !0 }) }, initDD: function () { var e = { view: this, createText: this.ddCreateEventText, moveText: this.ddMoveEventText, ddGroup: this.ddGroup || this.id + "-MonthViewDD" }; this.dragZone = Ext.create("Extensible.calendar.dd.DragZone", this.el, e), this.dropZone = Ext.create("Extensible.calendar.dd.DropZone", this.el, e) }, onDestroy: function () { Ext.destroy(this.ddSelector), Ext.destroy(this.dragZone), Ext.destroy(this.dropZone), this.callParent(arguments) }, afterRender: function () { this.tpl || (this.tpl = Ext.create("Extensible.calendar.template.Month", { id: this.id, showTodayText: this.showTodayText, todayText: this.todayText, showTime: this.showTime, showHeader: this.showHeader, showWeekLinks: this.showWeekLinks, showWeekNumbers: this.showWeekNumbers }), this.tpl.compile()), this.addCls("ext-cal-monthview ext-cal-ct"), this.callParent(arguments) }, onResize: function () { this.monitorResize && (this.maxEventsPerDay = this.getMaxEventsPerDay(), this.refresh(!1)) }, forceSize: function () { if (this.showWeekLinks && this.el) { var e = this.el.down(".ext-cal-hd-days-tbl"), t = this.el.select(".ext-cal-bg-tbl"), n = this.el.select(".ext-cal-evt-tbl"), r = this.el.down(".ext-cal-week-link").getWidth(), i = this.el.getWidth() - r; e.setWidth(i), t.setWidth(i), n.setWidth(i) } this.callParent(arguments) }, initClock: function () { Ext.fly(this.id + "-clock") !== null && (this.prevClockDay = (new Date).getDay(), this.clockTask && Ext.TaskManager.stop(this.clockTask), this.clockTask = Ext.TaskManager.start({ run: function () { var e = Ext.fly(this.id + "-clock"), t = new Date; t.getDay() == this.prevClockDay ? e && e.update(Ext.Date.format(t, Extensible.Date.use24HourTime ? "G:i" : "g:ia")) : (this.prevClockDay = t.getDay(), this.moveTo(t)) }, scope: this, interval: 1e3 })) }, getMoreText: function (e) { return this.moreText }, getEventBodyMarkup: function () { return this.eventBodyMarkup || (this.eventBodyMarkup = ["{Title}", '<tpl if="_isReminder">', '<i class="ext-cal-ic ext-cal-ic-rem">&#160;</i>', "</tpl>", '<tpl if="_isRecurring">', '<i class="ext-cal-ic ext-cal-ic-rcr">&#160;</i>', "</tpl>", '<tpl if="spanLeft">', '<i class="ext-cal-spl">&#160;</i>', "</tpl>", '<tpl if="spanRight">', '<i class="ext-cal-spr">&#160;</i>', "</tpl>"].join("")), this.eventBodyMarkup }, getEventTemplate: function () { if (!this.eventTpl) { var e, t = this.getEventBodyMarkup(); e = !Ext.isIE && !Ext.isOpera ? Ext.create("Ext.XTemplate", '<div class="{_extraCls} {spanCls} ext-cal-evt ext-cal-evr">', t, "</div>") : Ext.create("Ext.XTemplate", '<tpl if="_renderAsAllDay">', '<div class="{_extraCls} {spanCls} ext-cal-evt ext-cal-evo">', '<div class="ext-cal-evm">', '<div class="ext-cal-evi">', "</tpl>", '<tpl if="!_renderAsAllDay">', '<div class="{_extraCls} ext-cal-evt ext-cal-evr">', "</tpl>", t, '<tpl if="_renderAsAllDay">', "</div>", "</div>", "</tpl>", "</div>"), e.compile(), this.eventTpl = e } return this.eventTpl }, getTemplateEventData: function (e) { var t = Extensible.calendar.data.EventMappings, n = [this.getEventSelectorCls(e[t.EventId.name])], r = {}, i = e[t.RRule.name] != "", s = "x-cal-default", o = e[t.Title.name], u = Extensible.Date.use24HourTime ? "G:i " : "g:ia "; if (this.calendarStore && e[t.CalendarId.name]) { var a = this.calendarStore.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, e[t.CalendarId.name]); a && (s = "x-cal-" + a.data[Extensible.calendar.data.CalendarMappings.ColorId.name]) } s += e._renderAsAllDay ? "-ad" : "", n.push(s); if (this.getEventClass) { var a = this.getEventRecord(e[t.EventId.name]), f = this.getEventClass(a, !!e._renderAsAllDay, r, this.store); n.push(f) } return r._extraCls = n.join(" "), r._isRecurring = e.Recurrence && e.Recurrence != "", r._isReminder = e[t.Reminder.name] && e[t.Reminder.name] != "", r.Title = (e[t.IsAllDay.name] ? "" : Ext.Date.format(e[t.StartDate.name], u)) + (!o || o.length == 0 ? this.defaultEventTitleText : o), Ext.applyIf(r, e) }, refresh: function (e) { Extensible.log("refresh (MonthView)"), this.detailPanel && this.detailPanel.hide(), this.callParent(arguments), this.showTime !== !1 && this.initClock() }, renderItems: function () { Extensible.calendar.util.WeekEventRenderer.render({ eventGrid: this.allDayOnly ? this.allDayGrid : this.eventGrid, viewStart: this.viewStart, tpl: this.getEventTemplate(), maxEventsPerDay: this.maxEventsPerDay, viewId: this.id, templateDataFn: Ext.bind(this.getTemplateEventData, this), evtMaxCount: this.evtMaxCount, weekCount: this.weekCount, dayCount: this.dayCount, getMoreText: Ext.bind(this.getMoreText, this) }), this.fireEvent("eventsrendered", this) }, getDayEl: function (e) { return Ext.get(this.getDayId(e)) }, getDayId: function (e) { return Ext.isDate(e) && (e = Ext.Date.format(e, "Ymd")), this.id + this.dayElIdDelimiter + e }, getWeekIndex: function (e) { var t = this.getDayEl(e).up(".ext-cal-wk-ct"); return parseInt(t.id.split("-wk-")[1]) }, getDaySize: function (e) { var t = this.el.getBox(), n = this.getViewPadding(), r = (t.width - n.width) / this.dayCount, i = (t.height - n.height) / this.getWeekCount(); if (e) { var s = this.el.select(".ext-cal-dtitle").last().parent("tr"); i = s ? i - s.getHeight(!0) : i } return { height: i, width: r } }, getEventHeight: function () { if (!this.eventHeight) { var e = this.el.select(".ext-cal-evt").first(); if (!e) return 16; this.eventHeight = e.parent("td").getHeight() } return this.eventHeight }, getMaxEventsPerDay: function () { var e = this.getDaySize(!0).height, t = this.getEventHeight(), n = Math.max(Math.floor((e - t) / t), 0); return n }, getViewPadding: function (e) { var e = e || "tlbr", t = e.indexOf("t") > -1, n = e.indexOf("l") > -1, r = e.indexOf("r") > -1, i = this.showHeader && t ? this.el.select(".ext-cal-hd-days-tbl").first().getHeight() : 0, s = 0; return this.isHeaderView ? (n && (s = this.el.select(".ext-cal-gutter").first().getWidth()), r && (s += this.el.select(".ext-cal-gutter-rt").first().getWidth())) : this.showWeekLinks && n && (s = this.el.select(".ext-cal-week-link").first().getWidth()), { height: i, width: s } }, getDayAt: function (e, t) { var n = this.el.getBox(), r = this.getViewPadding("tl"), i = this.getDaySize(), s = Math.floor((e - n.x - r.width) / i.width), o = Math.floor((t - n.y - r.height) / i.height), u = o * 7 + s, a = Extensible.Date.add(this.viewStart, { days: u }); return { date: a, el: this.getDayEl(a) } }, moveNext: function () { return this.moveMonths(1, !0) }, movePrev: function () { return this.moveMonths(-1, !0) }, onInitDrag: function () { this.callParent(arguments), Ext.select(this.daySelector).removeCls(this.dayOverClass), this.detailPanel && this.detailPanel.hide() }, onMoreClick: function (e) { this.detailPanel ? this.detailPanel.setTitle(Ext.Date.format(e, this.detailsTitleDateFormat)) : (this.detailPanel = Ext.create("Ext.Panel", { id: this.id + "-details-panel", title: Ext.Date.format(e, this.detailsTitleDateFormat), layout: "fit", floating: !0, renderTo: Ext.getBody(), tools: [{ type: "close", handler: function (e, t, n) { n.ownerCt.hide() } }], items: { xtype: "extensible.monthdaydetailview", id: this.id + "-details-view", date: e, view: this, store: this.store, calendarStore: this.calendarStore, listeners: { eventsrendered: Ext.bind(this.onDetailViewUpdated, this) } } }), this.enableContextMenus && this.readOnly !== !0 && this.detailPanel.body.on("contextmenu", this.onContextMenu, this)), this.detailPanel.getComponent(this.id + "-details-view").update(e) }, onDetailViewUpdated: function (e, t, n) { var r = this.detailPanel, i = this.getDayEl(t), s = i.getBox(); r.setWidth(Math.max(s.width, 220)), r.show(), r.getPositionEl().alignTo(i, "t-t?") }, onHide: function () {
         this.callParent(arguments), this.detailPanel &&
         this.detailPanel.hide()
     }, onClick: function (e, t) { this.detailPanel && this.detailPanel.hide(); if (el = e.getTarget(this.moreSelector, 3)) { var n = el.id.split(this.moreElIdDelimiter)[1]; this.onMoreClick(Ext.Date.parseDate(n, "Ymd")); return } if (el = e.getTarget(this.weekLinkSelector, 3)) { var n = el.id.split(this.weekLinkIdDelimiter)[1]; this.fireEvent("weekclick", this, Ext.Date.parseDate(n, "Ymd")); return } if (Extensible.calendar.view.Month.superclass.onClick.apply(this, arguments)) return; if (el = e.getTarget("td", 3)) if (el.id && el.id.indexOf(this.dayElIdDelimiter) > -1) { var r = el.id.split(this.dayElIdDelimiter), n = r[r.length - 1]; this.onDayClick(Ext.Date.parseDate(n, "Ymd"), !1, Ext.get(this.getDayId(n))); return } }, handleDayMouseEvent: function (e, t, n) { var r = e.getTarget(this.weekLinkSelector, 3, !0); if (r) { r[n == "over" ? "addCls" : "removeCls"](this.weekLinkOverClass); return } this.callParent(arguments) }, destroy: function () { this.callParent(arguments), this.detailsPanel && this.detailPanel.body.un("contextmenu", this.onContextMenu, this) }
 }), Ext.define("Extensible.calendar.view.DayHeader", { extend: "Extensible.calendar.view.Month", alias: "widget.extensible.dayheaderview", requires: ["Extensible.calendar.template.DayHeader"], weekCount: 1, dayCount: 1, allDayOnly: !0, monitorResize: !1, isHeaderView: !0, afterRender: function () { this.tpl || (this.tpl = Ext.create("Extensible.calendar.template.DayHeader", { id: this.id, showTodayText: this.showTodayText, todayText: this.todayText, showTime: this.showTime })), this.tpl.compile(), this.addCls("ext-cal-day-header"), this.callParent(arguments) }, forceSize: Ext.emptyFn, refresh: function (e) { Extensible.log("refresh (DayHeaderView)"), this.callParent(arguments), this.recalcHeaderBox() }, recalcHeaderBox: function () { var e = this.el.down(".ext-cal-evt-tbl"), t = e.getHeight(); this.el.setHeight(t + 7), this.el.down(".ext-cal-hd-ad-inner").setHeight(t + 5), this.el.down(".ext-cal-bg-tbl").setHeight(t + 5) }, moveNext: function () { return this.moveDays(this.dayCount) }, movePrev: function () { return this.moveDays(-this.dayCount) }, onClick: function (e, t) { if (el = e.getTarget("td", 3)) if (el.id && el.id.indexOf(this.dayElIdDelimiter) > -1) { var n = el.id.split(this.dayElIdDelimiter), r = n[n.length - 1]; this.onDayClick(Ext.Date.parseDate(r, "Ymd"), !0, Ext.get(this.getDayId(r, !0))); return } this.callParent(arguments) } }), Ext.define("Extensible.calendar.view.DayBody", { extend: "Extensible.calendar.view.AbstractCalendar", alias: "widget.extensible.daybodyview", requires: ["Ext.XTemplate", "Extensible.calendar.template.DayBody", "Extensible.calendar.data.EventMappings", "Extensible.calendar.dd.DayDragZone", "Extensible.calendar.dd.DayDropZone"], dayColumnElIdDelimiter: "-day-col-", hourIncrement: 60, initComponent: function () { this.callParent(arguments), this.readOnly === !0 && (this.enableEventResize = !1), this.incrementsPerHour = this.hourIncrement / this.ddIncrement, this.minEventHeight = this.minEventDisplayMinutes / (this.hourIncrement / this.hourHeight), this.addEvents({ beforeeventresize: !0, eventresize: !0, dayclick: !0 }) }, initDD: function () { var e = { view: this, createText: this.ddCreateEventText, moveText: this.ddMoveEventText, resizeText: this.ddResizeEventText, ddIncrement: this.ddIncrement, ddGroup: this.ddGroup || this.id + "-DayViewDD" }; this.el.ddScrollConfig = { vthresh: Ext.isIE || Ext.isOpera ? 100 : 40, hthresh: -1, frequency: 50, increment: 100, ddGroup: this.ddGroup || this.id + "-DayViewDD" }, this.dragZone = Ext.create("Extensible.calendar.dd.DayDragZone", this.el, Ext.apply({}, e)), this.dropZone = Ext.create("Extensible.calendar.dd.DayDropZone", this.el, e) }, refresh: function (e) { Extensible.log("refresh (DayBodyView)"); var t = this.el.getScroll().top; this.callParent(arguments), this.scrollReady && this.scrollTo(t) }, scrollTo: function (e, t) { t = t || Ext.isIE || Ext.isOpera, t ? Ext.defer(function () { this.el.scrollTo("top", e), this.scrollReady = !0 }, 10, this) : (this.el.scrollTo("top", e), this.scrollReady = !0) }, afterRender: function () { this.tpl || (this.tpl = Ext.create("Extensible.calendar.template.DayBody", { id: this.id, dayCount: this.dayCount, showTodayText: this.showTodayText, todayText: this.todayText, showTime: this.showTime, showHourSeparator: this.showHourSeparator, viewStartHour: this.viewStartHour, viewEndHour: this.viewEndHour, hourIncrement: this.hourIncrement, hourHeight: this.hourHeight })), this.tpl.compile(), this.addCls("ext-cal-body-ct"), this.callParent(arguments); var e = Math.max(this.scrollStartHour, this.viewStartHour), t = Math.max(0, e - this.viewStartHour); t > 0 && this.scrollTo(t * this.hourHeight) }, forceSize: Ext.emptyFn, onEventResize: function (e, t) { if (this.fireEvent("beforeeventresize", this, e, t) !== !1) { var n = Extensible.Date, r = Extensible.calendar.data.EventMappings.StartDate.name, i = Extensible.calendar.data.EventMappings.EndDate.name; if (n.compare(e.data[r], t.StartDate) === 0 && n.compare(e.data[i], t.EndDate) === 0) return; e.set(r, t.StartDate), e.set(i, t.EndDate), this.onEventUpdate(null, e), this.fireEvent("eventresize", this, e) } }, getEventBodyMarkup: function () { return this.eventBodyMarkup || (this.eventBodyMarkup = ["{Title}", '<tpl if="_isReminder">', '<i class="ext-cal-ic ext-cal-ic-rem">&#160;</i>', "</tpl>", '<tpl if="_isRecurring">', '<i class="ext-cal-ic ext-cal-ic-rcr">&#160;</i>', "</tpl>"].join("")), this.eventBodyMarkup }, getEventTemplate: function () { return this.eventTpl || (this.eventTpl = !Ext.isIE && !Ext.isOpera ? Ext.create("Ext.XTemplate", '<div id="{_elId}" class="{_extraCls} ext-cal-evt ext-cal-evr" ', 'style="left: {_left}%; width: {_width}%; top: {_top}px; height: {_height}px;">', '<div class="ext-evt-bd">', this.getEventBodyMarkup(), "</div>", this.enableEventResize ? '<div class="ext-evt-rsz"><div class="ext-evt-rsz-h">&#160;</div></div>' : "", "</div>") : Ext.create("Ext.XTemplate", '<div id="{_elId}" class="ext-cal-evt {_extraCls}" ', 'style="left: {_left}%; width: {_width}%; top: {_top}px;">', '<div class="ext-cal-evb">&#160;</div>', '<dl style="height: {_height}px;" class="ext-cal-evdm">', '<dd class="ext-evt-bd">', this.getEventBodyMarkup(), "</dd>", this.enableEventResize ? '<div class="ext-evt-rsz"><div class="ext-evt-rsz-h">&#160;</div></div>' : "", "</dl>", '<div class="ext-cal-evb">&#160;</div>', "</div>"), this.eventTpl.compile()), this.eventTpl }, getEventAllDayTemplate: function () { if (!this.eventAllDayTpl) { var e, t = this.getEventBodyMarkup(); e = !Ext.isIE && !Ext.isOpera ? Ext.create("Ext.XTemplate", '<div class="{_extraCls} {spanCls} ext-cal-evt ext-cal-evr" ', 'style="left: {_left}%; width: {_width}%; top: {_top}px; height: {_height}px;">', t, "</div>") : Ext.create("Ext.XTemplate", '<div class="ext-cal-evt" ', 'style="left: {_left}%; width: {_width}%; top: {_top}px; height: {_height}px;">', '<div class="{_extraCls} {spanCls} ext-cal-evo">', '<div class="ext-cal-evm">', '<div class="ext-cal-evi">', t, "</div>", "</div>", "</div>", "</div>"), e.compile(), this.eventAllDayTpl = e } return this.eventAllDayTpl }, getTemplateEventData: function (e) { var t = Extensible.calendar.data.EventMappings, n = [this.getEventSelectorCls(e[t.EventId.name])], r = {}, i = "x-cal-default", s = e[t.Title.name], o = Extensible.Date.use24HourTime ? "G:i " : "g:ia ", u = e[t.RRule.name] != ""; this.getTemplateEventBox(e); if (this.calendarStore && e[t.CalendarId.name]) { var a = this.calendarStore.findRecord(Extensible.calendar.data.CalendarMappings.CalendarId.name, e[t.CalendarId.name]); a && (i = "x-cal-" + a.data[Extensible.calendar.data.CalendarMappings.ColorId.name]) } i += (e._renderAsAllDay ? "-ad" : "") + (Ext.isIE || Ext.isOpera ? "-x" : ""), n.push(i); if (this.getEventClass) { var a = this.getEventRecord(e[t.EventId.name]), f = this.getEventClass(a, !!e._renderAsAllDay, r, this.store); n.push(f) } return r._extraCls = n.join(" "), r._isRecurring = e.Recurrence && e.Recurrence != "", r._isReminder = e[t.Reminder.name] && e[t.Reminder.name] != "", r.Title = (e[t.IsAllDay.name] ? "" : Ext.Date.format(e[t.StartDate.name], o)) + (!s || s.length == 0 ? this.defaultEventTitleText : s), Ext.applyIf(r, e) }, getEventPositionOffsets: function () { return { top: 0, height: -1 } }, getTemplateEventBox: function (e) { var t = this.hourHeight / this.hourIncrement, n = e[Extensible.calendar.data.EventMappings.StartDate.name], r = e[Extensible.calendar.data.EventMappings.EndDate.name], i = Math.max(n.getHours() - this.viewStartHour, 0), s = Math.min(r.getHours() - this.viewStartHour, this.viewEndHour - this.viewStartHour), o = i * this.hourIncrement, u = s * this.hourIncrement, a = Extensible.Date.add(Ext.Date.clone(r), { hours: this.viewEndHour, clearTime: !0 }), f = this.getEventPositionOffsets(); n.getHours() >= this.viewStartHour && (o += n.getMinutes()), r <= a && (u += r.getMinutes()), e._left = 0, e._width = 100, e._top = o * t + f.top, e._height = Math.max((u - o) * t, this.minEventHeight) + f.height }, renderItems: function () { var e = 0, t = []; for (; e < this.dayCount; e++) { var n = emptyCells = skipped = 0, r = this.eventGrid[0][e], i = r ? r.length : 0, s; for (; n < i; n++) { s = r[n]; if (!s) continue; var o = s.data || s.event.data, u = Extensible.calendar.data.EventMappings, a = o[u.IsAllDay.name] === !0, f = this.isEventSpanning(s.event || s), l = a || f; if (l) continue; Ext.apply(o, { cls: "ext-cal-ev", _positioned: !0 }), t.push({ data: this.getTemplateEventData(o), date: Extensible.Date.add(this.viewStart, { days: e }) }) } } var c = j = 0, h = [], p = t.length, d; for (; c < p; c++) { var s = t[c].data, v = null, m = s[Extensible.calendar.data.EventMappings.StartDate.name].getDate(); for (j = 0; j < p; j++) { if (c == j) continue; v = t[j].data, this.isOverlapping(s, v) && (s._overlap = s._overlap == undefined ? 1 : s._overlap + 1, c < j && (s._overcol === undefined && (s._overcol = 0), v._overcol = s._overcol + 1, h[m] = h[m] ? Math.max(h[m], v._overcol) : v._overcol)) } } for (c = 0; c < p; c++) { var s = t[c].data, m = s[Extensible.calendar.data.EventMappings.StartDate.name].getDate(); if (s._overlap !== undefined) { var g = 100 / (h[m] + 1), y = 100 - g * s._overlap; s._width = g, s._left = g * s._overcol } var b = this.getEventTemplate().apply(s), w = this.id + "-day-col-" + Ext.Date.format(t[c].date, "Ymd"); Ext.core.DomHelper.append(w, b) } this.fireEvent("eventsrendered", this) }, getDayEl: function (e) { return Ext.get(this.getDayId(e)) }, getDayId: function (e) { return Ext.isDate(e) && (e = Ext.Date.format(e, "Ymd")), this.id + this.dayColumnElIdDelimiter + e }, getDaySize: function () { var e = this.el.down(".ext-cal-day-col-inner").getBox(); return { height: e.height, width: e.width } }, getDayAt: function (e, t) { var n = ".ext-cal-body-ct", r = this.el.down(".ext-cal-day-times").getWidth(), i = this.el.getBox(), s = this.getDaySize(!1), o = e - i.x - r, u = Math.floor(o / s.width), a = this.el.getScroll(), f = this.el.down(".ext-cal-bg-row"), l = f.getHeight() / this.incrementsPerHour, c = t - i.y - l + a.top, h = Math.max(0, Math.ceil(c / l)), p = h * (this.hourIncrement / this.incrementsPerHour), d = Extensible.Date.add(this.viewStart, { days: u, minutes: p, hours: this.viewStartHour }), v = this.getDayEl(d), m = e; return v && (m = v.getLeft()), { date: d, el: v, timeBox: { x: m, y: h * this.hourHeight / this.incrementsPerHour + i.y - a.top, width: s.width, height: l } } }, onClick: function (e, t) { if (this.dragPending || Extensible.calendar.view.DayBody.superclass.onClick.apply(this, arguments)) return; if (e.getTarget(".ext-cal-day-times", 3) !== null) return; var n = e.getTarget("td", 3); if (n && n.id && n.id.indexOf(this.dayElIdDelimiter) > -1) { var r = this.getDateFromId(n.id, this.dayElIdDelimiter); this.onDayClick(Ext.Date.parseDate(r, "Ymd"), !0, Ext.get(this.getDayId(r))); return } var i = this.getDayAt(e.getX(), e.getY()); i && i.date && this.onDayClick(i.date, !1, null) } }), Ext.define("Extensible.calendar.view.Day", { extend: "Ext.Container", alias: "widget.extensible.dayview", requires: ["Extensible.calendar.view.AbstractCalendar", "Extensible.calendar.view.DayHeader", "Extensible.calendar.view.DayBody"], showTime: !0, showTodayText: !0, dayCount: 1, enableEventResize: !0, ddIncrement: 30, minEventDisplayMinutes: 30, showHourSeparator: !0, viewStartHour: 0, viewEndHour: 24, scrollStartHour: 7, hourHeight: 42, hideMode: "offsets", initComponent: function () { this.ddCreateEventText = this.ddCreateEventText || Extensible.calendar.view.AbstractCalendar.prototype.ddCreateEventText, this.ddMoveEventText = this.ddMoveEventText || Extensible.calendar.view.AbstractCalendar.prototype.ddMoveEventText, this.dayCount = this.dayCount > 7 ? 7 : this.dayCount < 1 ? 1 : this.dayCount; var e = Ext.apply({}, this.initialConfig); e.showTime = this.showTime, e.showTodayText = this.showTodayText, e.todayText = this.todayText, e.dayCount = this.dayCount, e.weekCount = 1, e.readOnly = this.readOnly, e.ddIncrement = this.ddIncrement, e.minEventDisplayMinutes = this.minEventDisplayMinutes; var t = Ext.applyIf({ xtype: "extensible.dayheaderview", id: this.id + "-hd", ownerCalendarPanel: this.ownerCalendarPanel }, e), n = Ext.applyIf({ xtype: "extensible.daybodyview", enableEventResize: this.enableEventResize, showHourSeparator: this.showHourSeparator, viewStartHour: this.viewStartHour, viewEndHour: this.viewEndHour, scrollStartHour: this.scrollStartHour, hourHeight: this.hourHeight, id: this.id + "-bd", ownerCalendarPanel: this.ownerCalendarPanel }, e); this.items = [t, n], this.addCls("ext-cal-dayview ext-cal-ct"), this.callParent(arguments) }, afterRender: function () { this.callParent(arguments), this.header = Ext.getCmp(this.id + "-hd"), this.body = Ext.getCmp(this.id + "-bd"), this.body.on("eventsrendered", this.forceSize, this), this.on("resize", this.onResize, this) }, refresh: function () { Extensible.log("refresh (DayView)"), this.header.refresh(), this.body.refresh() }, forceSize: function () { Ext.defer(function () { var e = this.el.up(".x-panel-body"), t = this.el.down(".ext-cal-day-header"), n = e.getHeight() - t.getHeight(); this.el.down(".ext-cal-body-ct").setHeight(n - 1) }, 1, this) }, onResize: function () { this.forceSize(), Ext.defer(this.refresh, Ext.isIE ? 1 : 0, this) }, doHide: function () { this.header.doHide.apply(this, arguments), this.body.doHide.apply(this, arguments) }, getViewBounds: function () { return this.header.getViewBounds() }, getStartDate: function () { return this.header.getStartDate() }, setStartDate: function (e) { this.header.setStartDate(e, !0), this.body.setStartDate(e) }, renderItems: function () { this.header.renderItems(), this.body.renderItems() }, isToday: function () { return this.header.isToday() }, moveTo: function (e) { return this.header.moveTo(e), this.body.moveTo(e, !0) }, moveNext: function () { return this.header.moveNext(), this.body.moveNext(!0) }, movePrev: function (e) { return this.header.movePrev(), this.body.movePrev(!0) }, moveDays: function (e) { return this.header.moveDays(e), this.body.moveDays(e, !0) }, moveToday: function () { return this.header.moveToday(), this.body.moveToday(!0) }, showEventEditor: function (e, t) { return Extensible.calendar.view.AbstractCalendar.prototype.showEventEditor.apply(this, arguments) }, dismissEventEditor: function (e) { return Extensible.calendar.view.AbstractCalendar.prototype.dismissEventEditor.apply(this, arguments) } }), Ext.define("Extensible.calendar.view.MultiDay", { extend: "Extensible.calendar.view.Day", alias: "widget.extensible.multidayview", dayCount: 3, startDayIsStatic: !1, moveNext: function (e) { return this.moveDays(this.startDayIsStatic ? 7 : this.dayCount, e) }, movePrev: function (e) { return this.moveDays(this.startDayIsStatic ? -7 : -this.dayCount, e) } }), Ext.define("Extensible.calendar.view.Week", { extend: "Extensible.calendar.view.MultiDay", alias: "widget.extensible.weekview", dayCount: 7 }), Ext.define("Extensible.calendar.view.MultiWeek", { extend: "Extensible.calendar.view.Month", alias: "widget.extensible.multiweekview", weekCount: 2, moveNext: function () { return this.moveWeeks(this.weekCount, !0) }, movePrev: function () { return this.moveWeeks(-this.weekCount, !0) } }), Ext.define("Extensible.calendar.CalendarPanel", { extend: "Ext.panel.Panel", alias: "widget.extensible.calendarpanel", requires: ["Ext.layout.container.Card", "Extensible.calendar.view.Day", "Extensible.calendar.view.Week", "Extensible.calendar.view.Month", "Extensible.calendar.view.MultiDay", "Extensible.calendar.view.MultiWeek"], enableRecurrence: !1, showDayView: !0, showMultiDayView: !1, showWeekView: !0, showMultiWeekView: !0, showMonthView: !0, showNavBar: !0, todayText: "Today", showTodayText: !0, showTime: !0, readOnly: !1, showNavToday: !0, showNavJump: !0, showNavNextPrev: !0, jumpToText: "Jump to:", goText: "Go", dayText: "Day", multiDayText: "{0} Days", weekText: "Week", multiWeekText: "{0} Weeks", monthText: "Month", editModal: !1, enableEditDetails: !0, layout: { type: "card", deferredRender: !0 }, startDate: new Date, initComponent: function () { this.tbar = { cls: "ext-cal-toolbar", border: !0, items: [] }, this.viewCount = 0; var e = this.multiDayViewCfg && this.multiDayViewCfg.dayCount || 3, t = this.multiWeekViewCfg && this.multiWeekViewCfg.weekCount || 2; this.showNavToday && this.tbar.items.push({ id: this.id + "-tb-today", text: this.todayText, handler: this.onTodayClick, scope: this }), this.showNavNextPrev && (this.tbar.items.push({ id: this.id + "-tb-prev", handler: this.onPrevClick, scope: this, iconCls: "x-tbar-page-prev" }), this.tbar.items.push({ id: this.id + "-tb-next", handler: this.onNextClick, scope: this, iconCls: "x-tbar-page-next" })), this.showNavJump && (this.tbar.items.push(this.jumpToText), this.tbar.items.push({ id: this.id + "-tb-jump-dt", xtype: "datefield", width: 120, showToday: !1 }), this.tbar.items.push({ id: this.id + "-tb-jump", text: this.goText, handler: this.onJumpClick, scope: this })), this.tbar.items.push("->"), this.showDayView && (this.tbar.items.push({ id: this.id + "-tb-day", text: this.dayText, handler: this.onDayNavClick, scope: this, toggleGroup: this.id + "-tb-views" }), this.viewCount++); if (this.showMultiDayView) { var n = Ext.String.format(this.getMultiDayText(e), e); this.tbar.items.push({ id: this.id + "-tb-multiday", text: n, handler: this.onMultiDayNavClick, scope: this, toggleGroup: this.id + "-tb-views" }), this.viewCount++ } this.showWeekView && (this.tbar.items.push({ id: this.id + "-tb-week", text: this.weekText, handler: this.onWeekNavClick, scope: this, toggleGroup: this.id + "-tb-views" }), this.viewCount++); if (this.showMultiWeekView) { var n = Ext.String.format(this.getMultiWeekText(t), t); this.tbar.items.push({ id: this.id + "-tb-multiweek", text: n, handler: this.onMultiWeekNavClick, scope: this, toggleGroup: this.id + "-tb-views" }), this.viewCount++ } if (this.showMonthView || this.viewCount == 0) this.tbar.items.push({ id: this.id + "-tb-month", text: this.monthText, handler: this.onMonthNavClick, scope: this, toggleGroup: this.id + "-tb-views" }), this.viewCount++, this.showMonthView = !0; var r = this.viewCount - 1; this.activeItem = this.activeItem === undefined ? r : this.activeItem > r ? r : this.activeItem, this.showNavBar === !1 && (delete this.tbar, this.addCls("x-calendar-nonav")), this.callParent(arguments), this.addEvents({ eventadd: !0, eventupdate: !0, beforeeventdelete: !0, eventdelete: !0, eventcancel: !0, viewchange: !0, editdetails: !0 }), this.addCls("x-cal-panel"), this.eventStore && (this.store = this.eventStore, delete this.eventStore), this.setStore(this.store); var i = { showToday: this.showToday, todayText: this.todayText, showTodayText: this.showTodayText, showTime: this.showTime, readOnly: this.readOnly, enableRecurrence: this.enableRecurrence, store: this.store, calendarStore: this.calendarStore, editModal: this.editModal, enableEditDetails: this.enableEditDetails, ownerCalendarPanel: this }; if (this.showDayView) { var s = Ext.apply({ xtype: "extensible.dayview", title: this.dayText }, i); s = Ext.apply(Ext.apply(s, this.viewConfig), this.dayViewCfg), s.id = this.id + "-day", this.initEventRelay(s), this.add(s) } if (this.showMultiDayView) { var o = Ext.apply({ xtype: "extensible.multidayview", title: this.getMultiDayText(e) }, i); o = Ext.apply(Ext.apply(o, this.viewConfig), this.multiDayViewCfg), o.id = this.id + "-multiday", this.initEventRelay(o), this.add(o) } if (this.showWeekView) { var u = Ext.applyIf({ xtype: "extensible.weekview", title: this.weekText }, i); u = Ext.apply(Ext.apply(u, this.viewConfig), this.weekViewCfg), u.id = this.id + "-week", this.initEventRelay(u), this.add(u) } if (this.showMultiWeekView) { var a = Ext.applyIf({ xtype: "extensible.multiweekview", title: this.getMultiWeekText(t) }, i); a = Ext.apply(Ext.apply(a, this.viewConfig), this.multiWeekViewCfg), a.id = this.id + "-multiweek", this.initEventRelay(a), this.add(a) } if (this.showMonthView) { var f = Ext.applyIf({ xtype: "extensible.monthview", title: this.monthText, listeners: { weekclick: { fn: function (e, t) { this.showWeek(t) }, scope: this } } }, i); f = Ext.apply(Ext.apply(f, this.viewConfig), this.monthViewCfg), f.id = this.id + "-month", this.initEventRelay(f), this.add(f) } this.add(Ext.applyIf({ xtype: "extensible.eventeditform", id: this.id + "-edit", calendarStore: this.calendarStore, enableRecurrence: this.enableRecurrence, listeners: { eventadd: { scope: this, fn: this.onEventAdd }, eventupdate: { scope: this, fn: this.onEventUpdate }, eventdelete: { scope: this, fn: this.onEventDelete }, eventcancel: { scope: this, fn: this.onEventCancel } } }, this.editViewCfg)) }, initEventRelay: function (e) { e.listeners = e.listeners || {}, e.listeners.afterrender = { fn: function (e) { this.relayEvents(e, ["eventsrendered", "eventclick", "dayclick", "eventover", "eventout", "beforedatechange", "datechange", "rangeselect", "beforeeventmove", "eventmove", "initdrag", "dayover", "dayout", "beforeeventresize", "eventresize", "eventadd", "eventupdate", "beforeeventdelete", "eventdelete", "eventcancel"]), e.on("editdetails", this.onEditDetails, this) }, scope: this, single: !0 } }, afterRender: function () { this.callParent(arguments), this.body.addCls("x-cal-body"), this.updateNavState(), this.setActiveView() }, getMultiDayText: function (e) { return this.multiDayText }, getMultiWeekText: function (e) { return this.multiWeekText }, setStore: function (e, t) { var n = this.store; !t && n && n.un("write", this.onWrite, this), e && e.on("write", this.onWrite, this), this.store = e }, onStoreAdd: function (e, t, n) { this.hideEditForm() }, onStoreUpdate: function (e, t, n) { n == Ext.data.Record.COMMIT && this.hideEditForm() }, onStoreRemove: function (e, t) { this.hideEditForm() }, onWrite: function (e, t) { var n = t.records[0]; switch (t.action) { case "create": this.onStoreAdd(e, n); break; case "update": this.onStoreUpdate(e, n, Ext.data.Record.COMMIT); break; case "destroy": this.onStoreRemove(e, n) } }, onEditDetails: function (e, t, n) { this.fireEvent("editdetails", this, e, t, n) !== !1 && this.showEditForm(t) }, save: function () { this.store.autoSync || this.store.sync() }, onEventAdd: function (e, t) { t.store || (this.store.add(t), this.save()), this.fireEvent("eventadd", this, t) }, onEventUpdate: function (e, t) { this.save(), this.fireEvent("eventupdate", this, t) }, onEventDelete: function (e, t) { this.store.remove(t), this.save(), this.fireEvent("eventdelete", this, t) }, onEventCancel: function (e, t) { this.hideEditForm(), this.fireEvent("eventcancel", this, t) }, showEditForm: function (e) { return this.preEditView = this.layout.getActiveItem().id, this.setActiveView(this.id + "-edit"), this.layout.getActiveItem().loadRecord(e), this }, hideEditForm: function () { return this.preEditView && (this.setActiveView(this.preEditView), delete this.preEditView), this }, setActiveView: function (e, t) { var n = this, r = n.layout, i = n.id + "-edit", s; t && (n.startDate = t), e !== r.getActiveItem().id && (s = n.getDockedItems("toolbar")[0], s && s[e === i ? "hide" : "show"](), r.setActiveItem(e || n.activeItem), n.doComponentLayout(), n.activeView = r.getActiveItem(), e !== i && (e && e !== n.preEditView && r.activeItem.setStartDate(n.startDate, !0), n.updateNavState()), n.fireViewChange()) }, fireViewChange: function () { if (this.layout && this.layout.getActiveItem) { var e = this.layout.getActiveItem(), t = Ext.Date.clone; if (e) { if (e.getViewBounds) var n = e.getViewBounds(), r = { activeDate: t(e.getStartDate()), viewStart: t(n.start), viewEnd: t(n.end) }; e.dismissEventEditor && e.dismissEventEditor(), this.fireEvent("viewchange", this, e, r) } } }, updateNavState: function () { var e = this, t = e.layout.activeItem; if (t && e.showNavBar !== !1) { var n = t.id.split(e.id + "-")[1], r = Ext.getCmp(e.id + "-tb-" + n); e.showNavToday && Ext.getCmp(e.id + "-tb-today").setDisabled(t.isToday()), r.toggle(!0) } }, setStartDate: function (e) { return Extensible.log("setStartDate (CalendarPanel"), this.startDate = e, this.layout.activeItem.setStartDate(e, !0), this.updateNavState(), this.fireViewChange(), this }, showWeek: function (e) { this.setActiveView(this.id + "-week", e) }, onTodayClick: function () { this.startDate = this.layout.activeItem.moveToday(!0), this.updateNavState(), this.fireViewChange() }, onJumpClick: function () { var e = Ext.getCmp(this.id + "-tb-jump-dt").getValue(); e !== "" && (this.startDate = this.layout.activeItem.moveTo(e, !0), this.updateNavState(), this.fireViewChange()) }, onPrevClick: function () { this.startDate = this.layout.activeItem.movePrev(!0), this.updateNavState(), this.fireViewChange() }, onNextClick: function () { this.startDate = this.layout.activeItem.moveNext(!0), this.updateNavState(), this.fireViewChange() }, onDayNavClick: function () { this.setActiveView(this.id + "-day") }, onMultiDayNavClick: function () { this.setActiveView(this.id + "-multiday") }, onWeekNavClick: function () { this.setActiveView(this.id + "-week") }, onMultiWeekNavClick: function () { this.setActiveView(this.id + "-multiweek") }, onMonthNavClick: function () { this.setActiveView(this.id + "-month") }, getActiveView: function () { return this.layout.activeItem } })